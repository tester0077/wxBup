// Auto-generated by wxEC 0.1.33 - 05/12/18 13:09:48
// Do not edit this file - it will be overwritten on next pass
// Make any necessary changes to the source file:
// D:\pkg\wx\MSVC2015\_3.1-2015\GitHubProjects\wxBup-Test\wxBupWhenDone.e

#include "wxBupWhenDone.h"
#include <string.h>
//======================================================================
/**** Enum Class: EWhenDoneTypes ****/
const int EWhenDoneTypes::m_iMapSize = 6;
EWhenDoneTypes::Map_t EWhenDoneTypes::m_Map[EWhenDoneTypes::m_iMapSize];
//----------------------------------------------------------------------
EWhenDoneTypes::EWhenDoneTypes()
{
	m_Enum = eWhenDone_Unknown;
	EWhenDoneTypes::m_Map[0] = Map_t( eWhenDone_Unknown, "unknown", _T("unknown") );
	EWhenDoneTypes::m_Map[1] = Map_t( eWhenDone_DoNothing, "do nothing", _T("do nothing") );
	EWhenDoneTypes::m_Map[2] = Map_t( eWhenDone_Exit, "exit", _T("exit") );
	EWhenDoneTypes::m_Map[3] = Map_t( eWhenDone_Hibernate, "hibernate", _T("hibernate") );
	EWhenDoneTypes::m_Map[4] = Map_t( eWhenDone_LogOff, "logoff", _T("logoff") );
	EWhenDoneTypes::m_Map[5] = Map_t( eWhenDone_Shutdown, "shutdown", _T("shutdown") );
}
//----------------------------------------------------------------------
EWhenDoneTypes::~EWhenDoneTypes()
{
}
//----------------------------------------------------------------------
EWhenDoneTypes::Enum EWhenDoneTypes::operator=(int i)
{
	m_Enum = AsEnum(i);
	return m_Enum;
}
//----------------------------------------------------------------------
EWhenDoneTypes::operator int () const
{
	return m_Enum;
}
//----------------------------------------------------------------------
EWhenDoneTypes::Enum EWhenDoneTypes::operator=(const char* sz)
{
	m_Enum = AsEnum(sz);
	return m_Enum;
}
//----------------------------------------------------------------------
bool EWhenDoneTypes::operator==(const char* sz)
{
	return m_Enum == AsEnum(sz);
}
//----------------------------------------------------------------------
EWhenDoneTypes::operator const char* () const
{
	return AsName(m_Enum);
}
//----------------------------------------------------------------------
EWhenDoneTypes::Enum EWhenDoneTypes::AsEnum(const char* sz)
{
	for(int i=0;i<m_iMapSize;i++)
	{
		if(strcmp(sz, m_Map[i].szDescription)==0)
		{
			return (Enum)m_Map[i].iValue;
		}
	}
	return (Enum)m_Map[0].iValue;
}
//----------------------------------------------------------------------
EWhenDoneTypes::Enum EWhenDoneTypes::AsEnum(int e)
{
	for(int i=0;i<m_iMapSize;i++)
	{
		if(m_Map[i].iValue == e)
		{
			return (Enum)m_Map[i].iValue;
		}
	}
	return (Enum)m_Map[0].iValue;
}
//----------------------------------------------------------------------
const char* EWhenDoneTypes::AsName(int e)
{
	for(int i=0;i<m_iMapSize;i++)
	{
		if(m_Map[i].iValue == e)
		{
			return m_Map[i].szDescription;
		}
	}
	return m_Map[0].szDescription;
}
//----------------------------------------------------------------------
bool EWhenDoneTypes::GetMap(int iIndex, int& iValue, const char*& szDescription)
{
	if(iIndex>=m_iMapSize)
	{
		return false;
	}
	iValue = m_Map[iIndex].iValue;
	szDescription = m_Map[iIndex].szDescription;
	return true;
}
//----------------------------------------------------------------------
bool EWhenDoneTypes::GetMap(int iIndex, int& iValue, wxString& wsDescription)
{
	if(iIndex>=m_iMapSize)
	{
		return false;
	}
	iValue = m_Map[iIndex].iValue;
	wsDescription = m_Map[iIndex].wsDescription;
	return true;
}
//----------------------------------------------------------------------
const wxString& EWhenDoneTypes::AsWxName(int e)
{

	for(int i=0;i<m_iMapSize;i++)
	{
		if(m_Map[i].iValue == e)
		{
			return m_Map[i].wsDescription;
		}
	}
	return m_Map[0].wsDescription;
}

// ------------------------------- eof ------------------------------
