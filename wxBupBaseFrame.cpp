//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: wxBupc.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "wxBupBaseFrame.h"


// Declare the bitmap loading function
extern void wxCE65CInitBitmapResources();

static bool bBitmapLoaded = false;


MyFrameBase::MyFrameBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxFrame(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCE65CInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    m_menubarMain = new wxMenuBar(0);
    this->SetMenuBar(m_menubarMain);
    
    m_menuFile = new wxMenu();
    m_menubarMain->Append(m_menuFile, _("File"));
    
    m_menuItemNewJobFile = new wxMenuItem(m_menuFile, wxID_NEW_JOB, _("New\tN"), _("Create a new job file"), wxITEM_NORMAL);
    m_menuFile->Append(m_menuItemNewJobFile);
    
    m_menuItemSelJobFile = new wxMenuItem(m_menuFile, wxID_MENU_SEL_DIR, _("Open ...\tO"), _("Select a job file to load"), wxITEM_NORMAL);
    m_menuFile->Append(m_menuItemSelJobFile);
    
    m_menuItemEditJobFile = new wxMenuItem(m_menuFile, wxID_EDIT, _("Edit\tE"), _("Edit selected job file"), wxITEM_NORMAL);
    m_menuFile->Append(m_menuItemEditJobFile);
    
    m_menuFile->AppendSeparator();
    
    m_menuItemRenameFile = new wxMenuItem(m_menuFile, wxID_ANY, _("Rename ...\tA"), _("Rename selected job file"), wxITEM_NORMAL);
    m_menuFile->Append(m_menuItemRenameFile);
    
    m_menuItemSaveFileAs = new wxMenuItem(m_menuFile, wxID_ANY, _("Save As ...\tS"), _("Save selected job file with a new name."), wxITEM_NORMAL);
    m_menuFile->Append(m_menuItemSaveFileAs);
    
    m_menuFile->AppendSeparator();
    
    m_menuItemBackup = new wxMenuItem(m_menuFile, wxID_MENU_BACKUP, _("Backup\tB"), _("Start backup"), wxITEM_NORMAL);
    m_menuFile->Append(m_menuItemBackup);
    
    m_menuItemRestoreJob = new wxMenuItem(m_menuFile, wxID_MENU_RESTORE, _("Restore\tR"), wxT(""), wxITEM_NORMAL);
    m_menuFile->Append(m_menuItemRestoreJob);
    
    m_menuItemTest = new wxMenuItem(m_menuFile, wxID_TB_TEST, _("Verify data\tV"), _("Verify backed up data against the original files"), wxITEM_NORMAL);
    m_menuFile->Append(m_menuItemTest);
    
    m_menuFile->AppendSeparator();
    
    m_menuItemDump = new wxMenuItem(m_menuFile, wxID_MENU_DUMP, _("Dump Zip List"), wxT(""), wxITEM_NORMAL);
    m_menuFile->Append(m_menuItemDump);
    
    m_menuFile->AppendSeparator();
    
    menuItemFileExit = new wxMenuItem(m_menuFile, wxID_EXIT, _("Exit\tAlt-F4"), wxT(""), wxITEM_NORMAL);
    m_menuFile->Append(menuItemFileExit);
    
    m_menuOptions = new wxMenu();
    m_menubarMain->Append(m_menuOptions, _("Options"));
    
    m_menuItemOptions = new wxMenuItem(m_menuOptions, wxID_MENU_OPTIONS, _("Options"), _("Open the optons dialog"), wxITEM_NORMAL);
    m_menuOptions->Append(m_menuItemOptions);
    
    m_menuOptions->AppendSeparator();
    
    m_menuItemLogShow = new wxMenuItem(m_menuOptions, wxID_LOG_SHOW, _("Show Log Window\tL"), _("Show log window"), wxITEM_CHECK);
    m_menuOptions->Append(m_menuItemLogShow);
    m_menuItemLogShow->Check();
    
    m_menuItemLogClear = new wxMenuItem(m_menuOptions, wxID_LOG_CLEAR, _("Clear Log Window\tC"), _("Clear log window"), wxITEM_NORMAL);
    m_menuOptions->Append(m_menuItemLogClear);
    
    m_menuOptions->AppendSeparator();
    
    m_menuItemOpenLogFiles = new wxMenuItem(m_menuOptions, wxID_LOG_VIEW, _("View Log File\tV"), _("Open the current log file in default editor - read-only"), wxITEM_NORMAL);
    m_menuOptions->Append(m_menuItemOpenLogFiles);
    
    m_menuItemDeleteLogFile = new wxMenuItem(m_menuOptions, wxID_LOG_DELETE, _("Delete log files\tD"), _("Delete log files"), wxITEM_NORMAL);
    m_menuOptions->Append(m_menuItemDeleteLogFile);
    
    m_menuCrash = new wxMenu();
    m_menubarMain->Append(m_menuCrash, _("Crash"));
    
    m_menuItemCrashException = new wxMenuItem(m_menuCrash, wxID_ANY, _("Exception"), wxT(""), wxITEM_NORMAL);
    m_menuCrash->Append(m_menuItemCrashException);
    
    m_menuHelp = new wxMenu();
    m_menubarMain->Append(m_menuHelp, _("Help"));
    
    m_menuItemHelp = new wxMenuItem(m_menuHelp, wxID_HELP, _("Help\tF1"), wxT(""), wxITEM_NORMAL);
    m_menuHelp->Append(m_menuItemHelp);
    
    m_menuItemCheck4Updates = new wxMenuItem(m_menuHelp, wxID_ANY, _("Check for updates"), wxT(""), wxITEM_NORMAL);
    m_menuHelp->Append(m_menuItemCheck4Updates);
    
    m_menuAbout = new wxMenuItem(m_menuHelp, wxID_ABOUT, _("About"), wxT(""), wxITEM_NORMAL);
    m_menuHelp->Append(m_menuAbout);
    
    m_toolbarMain = this->CreateToolBar(wxTB_HORIZONTAL, wxID_TOOLBAR_TOGGLE_HORIZONTAL_TEXT);
    m_toolbarMain->SetToolBitmapSize(wxSize(16,16));
    m_toolbarMain->SetToolPacking(10);
    m_toolbarMain->SetToolSeparation(10);
    
    m_toolbarMain->AddTool(wxID_NEW_JOB, _("New Job"), wxXmlResource::Get()->LoadBitmap(wxT("NewDocument")), wxNullBitmap, wxITEM_NORMAL, _("Start a new job file"), _("Start a new job file"), NULL);
    
    m_toolbarMain->AddTool(wxID_TB_OPEN, _("Load"), wxXmlResource::Get()->LoadBitmap(wxT("Folder")), wxNullBitmap, wxITEM_NORMAL, _("Load selected job file"), _("Load selected job file"), NULL);
    
    m_toolbarMain->AddTool(wxID_TB_DEL, _("Delete"), wxXmlResource::Get()->LoadBitmap(wxT("CloseFile")), wxNullBitmap, wxITEM_NORMAL, _("Delete the selected job file"), _("Delete the selected job file"), NULL);
    
    m_toolbarMain->AddSeparator();
    
    m_toolbarMain->AddTool(wxID_TB_EDIT, _("Edit"), wxXmlResource::Get()->LoadBitmap(wxT("modify")), wxNullBitmap, wxITEM_NORMAL, _("Edit current job file"), wxT(""), NULL);
    
    m_toolbarMain->AddSeparator();
    
    m_toolbarMain->AddTool(wxID_TB_BACKUP, _("Backup"), wxXmlResource::Get()->LoadBitmap(wxT("ark-in")), wxNullBitmap, wxITEM_NORMAL, _("Backup Data"), _("Backup Data"), NULL);
    
    m_toolbarMain->AddTool(wxID_TB_RESTORE, _("Restore"), wxXmlResource::Get()->LoadBitmap(wxT("ark-out")), wxNullBitmap, wxITEM_NORMAL, _("Restore data"), _("Restore data"), NULL);
    
    m_toolbarMain->AddTool(wxID_TB_TEST, _("Test"), wxXmlResource::Get()->LoadBitmap(wxT("demo")), wxNullBitmap, wxITEM_NORMAL, _("Test a backup job"), _("Test a backup job"), NULL);
    
    m_toolbarMain->AddSeparator();
    
    m_toolbarMain->AddTool(wxID_TB_STOP, _("Stop"), wxXmlResource::Get()->LoadBitmap(wxT("Stop")), wxNullBitmap, wxITEM_NORMAL, _("Stop the current job"), _("Stop the current job"), NULL);
    
    m_toolbarMain->AddSeparator();
    
    m_gaugeProgress = new wxGauge(m_toolbarMain, wxID_ANY, 100, wxDefaultPosition, wxDLG_UNIT(m_toolbarMain, wxSize(-1,-1)), wxGA_HORIZONTAL);
    m_gaugeProgress->SetValue(10);
    m_toolbarMain->AddControl(m_gaugeProgress);
    
    m_toolbarMain->AddStretchableSpace();
    
    m_staticTextWhenDone = new wxStaticText(m_toolbarMain, wxID_ANY, _("When\n done:"), wxDefaultPosition, wxDLG_UNIT(m_toolbarMain, wxSize(-1,-1)), 0);
    m_toolbarMain->AddControl(m_staticTextWhenDone);
    
    wxArrayString m_choiceWhenDoneArr;
    m_choiceWhenDoneArr.Add(wxT("Do nothing"));
    m_choiceWhenDoneArr.Add(wxT("Exit"));
    m_choiceWhenDoneArr.Add(wxT("Hibernate"));
    m_choiceWhenDoneArr.Add(wxT("Log off"));
    m_choiceWhenDoneArr.Add(wxT("Shutdown"));
    m_choiceWhenDoneArr.Add(wxT("Sleep"));
    m_choiceWhenDone = new wxChoice(m_toolbarMain, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_toolbarMain, wxSize(-1,-1)), m_choiceWhenDoneArr, 0);
    m_choiceWhenDone->SetToolTip(_("What to do when done"));
    m_toolbarMain->AddControl(m_choiceWhenDone);
    
    m_checkBoxWhenDone = new wxCheckBox(m_toolbarMain, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_toolbarMain, wxSize(-1,-1)), 0);
    m_checkBoxWhenDone->SetValue(false);
    m_checkBoxWhenDone->SetToolTip(_("Enable action 'When done'"));
    m_toolbarMain->AddControl(m_checkBoxWhenDone);
    
    m_toolbarMain->AddSeparator();
    
    m_toolbarMain->AddTool(wxID_HELP, _("Help"), wxXmlResource::Get()->LoadBitmap(wxT("Help")), wxNullBitmap, wxITEM_NORMAL, _("Display Help information"), wxT(""), NULL);
    m_toolbarMain->Realize();
    
    wxBoxSizer* bSizerMain = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(bSizerMain);
    
    m_splitterMain = new wxSplitterWindow(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), wxSP_3D);
    m_splitterMain->SetSashGravity(0.5);
    m_splitterMain->SetMinimumPaneSize(25);
    
    bSizerMain->Add(m_splitterMain, 1, wxEXPAND, WXC_FROM_DIP(3));
    
    m_panelMain = new wxPanel(m_splitterMain, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitterMain, wxSize(-1, -1)), wxTAB_TRAVERSAL|wxBORDER_RAISED);
    m_panelMain->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    wxBoxSizer* boxSizer388 = new wxBoxSizer(wxHORIZONTAL);
    m_panelMain->SetSizer(boxSizer388);
    
    m_splitterJob = new wxSplitterWindow(m_panelMain, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelMain, wxSize(-1,-1)), wxSP_3D);
    m_splitterJob->SetSashGravity(0.5);
    m_splitterJob->SetMinimumPaneSize(10);
    
    boxSizer388->Add(m_splitterJob, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_splitterPageJobList = new wxPanel(m_splitterJob, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitterJob, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    wxStaticBoxSizer* staticBoxSizerJobList = new wxStaticBoxSizer( new wxStaticBox(m_splitterPageJobList, wxID_ANY, _("Backup Jobs")), wxVERTICAL);
    m_splitterPageJobList->SetSizer(staticBoxSizerJobList);
    
    m_textCtrlJobList = new wxTextCtrl(m_splitterPageJobList, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_splitterPageJobList, wxSize(-1,-1)), wxTE_RICH2|wxTE_READONLY|wxTE_NOHIDESEL|wxTE_MULTILINE);
    
    staticBoxSizerJobList->Add(m_textCtrlJobList, 1, wxEXPAND, WXC_FROM_DIP(5));
    
    m_splitterPageJobContent = new wxPanel(m_splitterJob, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitterJob, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_splitterJob->SplitVertically(m_splitterPageJobList, m_splitterPageJobContent, 100);
    
    wxBoxSizer* boxSizerJobContent = new wxBoxSizer(wxVERTICAL);
    m_splitterPageJobContent->SetSizer(boxSizerJobContent);
    
    m_notebookJob = new wxNotebook(m_splitterPageJobContent, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitterPageJobContent, wxSize(-1,-1)), wxBK_DEFAULT);
    m_notebookJob->SetName(wxT("m_notebookJob"));
    
    boxSizerJobContent->Add(m_notebookJob, 4, wxEXPAND, WXC_FROM_DIP(5));
    
    m_panelSummary = new wxPanel(m_notebookJob, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebookJob, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_notebookJob->AddPage(m_panelSummary, _("Summary"), false);
    
    wxBoxSizer* boxSizer430 = new wxBoxSizer(wxVERTICAL);
    m_panelSummary->SetSizer(boxSizer430);
    
    m_richTextCtrlSummary = new wxRichTextCtrl(m_panelSummary, wxID_ANY, wxT("wxRichTextCtrl!"), wxDefaultPosition, wxDLG_UNIT(m_panelSummary, wxSize(-1,-1)), wxTE_READONLY|wxTE_MULTILINE|wxTE_PROCESS_TAB|wxTE_PROCESS_ENTER|wxWANTS_CHARS);
    
    boxSizer430->Add(m_richTextCtrlSummary, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_panelSpecialFiles = new wxPanel(m_notebookJob, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebookJob, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_notebookJob->AddPage(m_panelSpecialFiles, _("Special Files"), false);
    
    wxBoxSizer* boxSizer436 = new wxBoxSizer(wxVERTICAL);
    m_panelSpecialFiles->SetSizer(boxSizer436);
    
    m_textCtrlSpecialFiles = new wxTextCtrl(m_panelSpecialFiles, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelSpecialFiles, wxSize(-1,-1)), wxTE_RICH2|wxTE_RICH|wxTE_READONLY|wxTE_MULTILINE);
    
    boxSizer436->Add(m_textCtrlSpecialFiles, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_panelErrors = new wxPanel(m_notebookJob, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebookJob, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_notebookJob->AddPage(m_panelErrors, _("Errors"), false);
    
    wxBoxSizer* boxSizer1466 = new wxBoxSizer(wxVERTICAL);
    m_panelErrors->SetSizer(boxSizer1466);
    
    m_textCtrlErrors = new wxTextCtrl(m_panelErrors, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelErrors, wxSize(-1,-1)), wxTE_RICH2|wxTE_RICH|wxTE_READONLY|wxTE_MULTILINE);
    
    boxSizer1466->Add(m_textCtrlErrors, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_panelLog = new wxPanel(m_splitterMain, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitterMain, wxSize(-1, -1)), wxTAB_TRAVERSAL|wxBORDER_RAISED);
    m_panelLog->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INFOBK));
    m_splitterMain->SplitHorizontally(m_panelMain, m_panelLog, 0);
    
    wxBoxSizer* bSizerLog = new wxBoxSizer(wxVERTICAL);
    m_panelLog->SetSizer(bSizerLog);
    
    m_textCtrlLog = new wxTextCtrl(m_panelLog, wxID_LOG_WINDOW, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelLog, wxSize(-1, -1)), wxTE_RICH2|wxTE_RICH|wxTE_READONLY|wxTE_MULTILINE);
    
    bSizerLog->Add(m_textCtrlLog, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_statusBar = new wxStatusBar(this, wxID_ANY, wxSTB_ELLIPSIZE_MIDDLE);
    m_statusBar->SetFieldsCount(3);
    this->SetStatusBar(m_statusBar);
    
    SetName(wxT("MyFrameBase"));
    SetSize(600,522);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent();
    } else {
        CentreOnScreen();
    }
    // Connect events
    this->Connect(wxEVT_SIZE, wxSizeEventHandler(MyFrameBase::OnMainFrameSize), NULL, this);
    this->Connect(m_menuItemNewJobFile->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnNewJobFile), NULL, this);
    this->Connect(m_menuItemNewJobFile->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUIMenuNewJob), NULL, this);
    this->Connect(m_menuItemSelJobFile->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnSelJobFile), NULL, this);
    this->Connect(m_menuItemSelJobFile->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiMenuSel), NULL, this);
    this->Connect(m_menuItemEditJobFile->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnEditJobFile), NULL, this);
    this->Connect(m_menuItemEditJobFile->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiMenuEdit), NULL, this);
    this->Connect(m_menuItemRenameFile->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnRenameFile), NULL, this);
    this->Connect(m_menuItemSaveFileAs->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnSaveAsFile), NULL, this);
    this->Connect(m_menuItemBackup->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnStartWorker), NULL, this);
    this->Connect(m_menuItemBackup->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiMenuBackup), NULL, this);
    this->Connect(m_menuItemRestoreJob->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnRestoreJob), NULL, this);
    this->Connect(m_menuItemRestoreJob->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiMenuRestore), NULL, this);
    this->Connect(m_menuItemTest->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnTestJob), NULL, this);
    this->Connect(m_menuItemTest->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiMenuTest), NULL, this);
    this->Connect(m_menuItemDump->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnDumpZipList), NULL, this);
    this->Connect(m_menuItemDump->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUIMenuDump), NULL, this);
    this->Connect(m_menuItemOptions->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnOptions), NULL, this);
    this->Connect(m_menuItemOptions->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiMenuOptions), NULL, this);
    this->Connect(m_menuItemLogShow->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnMenuItemLogShow), NULL, this);
    this->Connect(m_menuItemLogClear->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnMenuItemLogClear), NULL, this);
    this->Connect(m_menuItemOpenLogFiles->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnMenuItemOpenLogFiles), NULL, this);
    this->Connect(m_menuItemOpenLogFiles->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiMenuOpenLog), NULL, this);
    this->Connect(m_menuItemDeleteLogFile->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnMenuItemDeleteLogFiles), NULL, this);
    this->Connect(m_menuItemDeleteLogFile->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiMenuDelLog), NULL, this);
    this->Connect(m_menuItemCrashException->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnCauseException), NULL, this);
    this->Connect(m_menuItemCrashException->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiMenuCrash), NULL, this);
    this->Connect(m_menuItemHelp->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnMenuShowHelpContents), NULL, this);
    this->Connect(m_menuItemHelp->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiMenuHelp), NULL, this);
    this->Connect(m_menuItemCheck4Updates->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnCheck4Update), NULL, this);
    this->Connect(wxID_NEW_JOB, wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUITbNewJob), NULL, this);
    this->Connect(wxID_NEW_JOB, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(MyFrameBase::OnNewJobFile), NULL, this);
    this->Connect(wxID_TB_OPEN, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(MyFrameBase::OnSelJobFile), NULL, this);
    this->Connect(wxID_TB_OPEN, wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUITbOpenJob), NULL, this);
    this->Connect(wxID_TB_DEL, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(MyFrameBase::OnDeleteFileCLick), NULL, this);
    this->Connect(wxID_TB_DEL, wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUITbDeleteJob), NULL, this);
    this->Connect(wxID_TB_EDIT, wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUITbEditJob), NULL, this);
    this->Connect(wxID_TB_EDIT, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(MyFrameBase::OnEditJobFile), NULL, this);
    this->Connect(wxID_TB_BACKUP, wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUITbBackupJob), NULL, this);
    this->Connect(wxID_TB_BACKUP, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(MyFrameBase::OnStartWorker), NULL, this);
    this->Connect(wxID_TB_RESTORE, wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUITbRestoreJob), NULL, this);
    this->Connect(wxID_TB_RESTORE, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(MyFrameBase::OnRestoreJob), NULL, this);
    this->Connect(wxID_TB_TEST, wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUITbTestJob), NULL, this);
    this->Connect(wxID_TB_TEST, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(MyFrameBase::OnTestJob), NULL, this);
    this->Connect(wxID_TB_STOP, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(MyFrameBase::OnStop), NULL, this);
    this->Connect(wxID_TB_STOP, wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiTbStop), NULL, this);
    m_checkBoxWhenDone->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(MyFrameBase::OnWhenDoneClicked), NULL, this);
    m_textCtrlJobList->Connect(wxEVT_LEFT_UP, wxMouseEventHandler(MyFrameBase::OnJobsSelectLine), NULL, this);
    m_textCtrlJobList->Connect(wxEVT_CONTEXT_MENU, wxContextMenuEventHandler(MyFrameBase::OnJobListRightClick), NULL, this);
    m_textCtrlJobList->Connect(wxEVT_CHAR, wxKeyEventHandler(MyFrameBase::OnJobListChar), NULL, this);
    
}

MyFrameBase::~MyFrameBase()
{
    this->Disconnect(wxEVT_SIZE, wxSizeEventHandler(MyFrameBase::OnMainFrameSize), NULL, this);
    this->Disconnect(m_menuItemNewJobFile->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnNewJobFile), NULL, this);
    this->Disconnect(m_menuItemNewJobFile->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUIMenuNewJob), NULL, this);
    this->Disconnect(m_menuItemSelJobFile->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnSelJobFile), NULL, this);
    this->Disconnect(m_menuItemSelJobFile->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiMenuSel), NULL, this);
    this->Disconnect(m_menuItemEditJobFile->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnEditJobFile), NULL, this);
    this->Disconnect(m_menuItemEditJobFile->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiMenuEdit), NULL, this);
    this->Disconnect(m_menuItemRenameFile->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnRenameFile), NULL, this);
    this->Disconnect(m_menuItemSaveFileAs->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnSaveAsFile), NULL, this);
    this->Disconnect(m_menuItemBackup->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnStartWorker), NULL, this);
    this->Disconnect(m_menuItemBackup->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiMenuBackup), NULL, this);
    this->Disconnect(m_menuItemRestoreJob->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnRestoreJob), NULL, this);
    this->Disconnect(m_menuItemRestoreJob->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiMenuRestore), NULL, this);
    this->Disconnect(m_menuItemTest->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnTestJob), NULL, this);
    this->Disconnect(m_menuItemTest->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiMenuTest), NULL, this);
    this->Disconnect(m_menuItemDump->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnDumpZipList), NULL, this);
    this->Disconnect(m_menuItemDump->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUIMenuDump), NULL, this);
    this->Disconnect(m_menuItemOptions->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnOptions), NULL, this);
    this->Disconnect(m_menuItemOptions->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiMenuOptions), NULL, this);
    this->Disconnect(m_menuItemLogShow->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnMenuItemLogShow), NULL, this);
    this->Disconnect(m_menuItemLogClear->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnMenuItemLogClear), NULL, this);
    this->Disconnect(m_menuItemOpenLogFiles->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnMenuItemOpenLogFiles), NULL, this);
    this->Disconnect(m_menuItemOpenLogFiles->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiMenuOpenLog), NULL, this);
    this->Disconnect(m_menuItemDeleteLogFile->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnMenuItemDeleteLogFiles), NULL, this);
    this->Disconnect(m_menuItemDeleteLogFile->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiMenuDelLog), NULL, this);
    this->Disconnect(m_menuItemCrashException->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnCauseException), NULL, this);
    this->Disconnect(m_menuItemCrashException->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiMenuCrash), NULL, this);
    this->Disconnect(m_menuItemHelp->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnMenuShowHelpContents), NULL, this);
    this->Disconnect(m_menuItemHelp->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiMenuHelp), NULL, this);
    this->Disconnect(m_menuItemCheck4Updates->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnCheck4Update), NULL, this);
    this->Disconnect(wxID_NEW_JOB, wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUITbNewJob), NULL, this);
    this->Disconnect(wxID_NEW_JOB, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(MyFrameBase::OnNewJobFile), NULL, this);
    this->Disconnect(wxID_TB_OPEN, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(MyFrameBase::OnSelJobFile), NULL, this);
    this->Disconnect(wxID_TB_OPEN, wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUITbOpenJob), NULL, this);
    this->Disconnect(wxID_TB_DEL, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(MyFrameBase::OnDeleteFileCLick), NULL, this);
    this->Disconnect(wxID_TB_DEL, wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUITbDeleteJob), NULL, this);
    this->Disconnect(wxID_TB_EDIT, wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUITbEditJob), NULL, this);
    this->Disconnect(wxID_TB_EDIT, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(MyFrameBase::OnEditJobFile), NULL, this);
    this->Disconnect(wxID_TB_BACKUP, wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUITbBackupJob), NULL, this);
    this->Disconnect(wxID_TB_BACKUP, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(MyFrameBase::OnStartWorker), NULL, this);
    this->Disconnect(wxID_TB_RESTORE, wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUITbRestoreJob), NULL, this);
    this->Disconnect(wxID_TB_RESTORE, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(MyFrameBase::OnRestoreJob), NULL, this);
    this->Disconnect(wxID_TB_TEST, wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUITbTestJob), NULL, this);
    this->Disconnect(wxID_TB_TEST, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(MyFrameBase::OnTestJob), NULL, this);
    this->Disconnect(wxID_TB_STOP, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(MyFrameBase::OnStop), NULL, this);
    this->Disconnect(wxID_TB_STOP, wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiTbStop), NULL, this);
    m_checkBoxWhenDone->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(MyFrameBase::OnWhenDoneClicked), NULL, this);
    m_textCtrlJobList->Disconnect(wxEVT_LEFT_UP, wxMouseEventHandler(MyFrameBase::OnJobsSelectLine), NULL, this);
    m_textCtrlJobList->Disconnect(wxEVT_CONTEXT_MENU, wxContextMenuEventHandler(MyFrameBase::OnJobListRightClick), NULL, this);
    m_textCtrlJobList->Disconnect(wxEVT_CHAR, wxKeyEventHandler(MyFrameBase::OnJobListChar), NULL, this);
    
}

MyBaseOptionsDialog::MyBaseOptionsDialog(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCE65CInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* bSizer27 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(bSizer27);
    
    m_nbOptions = new wxNotebook(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_nbOptions->SetName(wxT("m_nbOptions"));
    
    bSizer27->Add(m_nbOptions, 5, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_panelGeneral = new wxPanel(m_nbOptions, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_nbOptions, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_nbOptions->AddPage(m_panelGeneral, _("General"), false);
    
    wxBoxSizer* boxSizer365 = new wxBoxSizer(wxVERTICAL);
    m_panelGeneral->SetSizer(boxSizer365);
    
    wxStaticBoxSizer* staticBoxSizerDlgSummaryUpdate = new wxStaticBoxSizer( new wxStaticBox(m_panelGeneral, wxID_ANY, _("Summary Update Interval (Secs)")), wxVERTICAL);
    
    boxSizer365->Add(staticBoxSizerDlgSummaryUpdate, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_spinCtrlSummaryUpdate = new wxSpinCtrl(m_panelGeneral, wxID_ANY, wxT("10"), wxDefaultPosition, wxDLG_UNIT(m_panelGeneral, wxSize(-1,-1)), wxSP_ARROW_KEYS);
    m_spinCtrlSummaryUpdate->SetToolTip(_("The time interval (in seconds) for updates to summary page.\n0 => no updates"));
    m_spinCtrlSummaryUpdate->SetRange(0, 60);
    m_spinCtrlSummaryUpdate->SetValue(10);
    
    staticBoxSizerDlgSummaryUpdate->Add(m_spinCtrlSummaryUpdate, 0, wxALL, WXC_FROM_DIP(5));
    
    wxGridSizer* gridSizerGenMisc = new wxGridSizer(0, 2, 0, 0);
    
    boxSizer365->Add(gridSizerGenMisc, 1, wxEXPAND, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizerDlgStartup = new wxStaticBoxSizer( new wxStaticBox(m_panelGeneral, wxID_ANY, _("At start:")), wxVERTICAL);
    
    gridSizerGenMisc->Add(staticBoxSizerDlgStartup, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    m_checkBoxLoadLastJobAtStart = new wxCheckBox(m_panelGeneral, wxID_ANY, _("Load last job file at start"), wxDefaultPosition, wxDLG_UNIT(m_panelGeneral, wxSize(-1,-1)), 0);
    m_checkBoxLoadLastJobAtStart->SetValue(true);
    
    staticBoxSizerDlgStartup->Add(m_checkBoxLoadLastJobAtStart, 0, wxALL, WXC_FROM_DIP(5));
    
    m_checkBoxCheck4NewVersionAtStart = new wxCheckBox(m_panelGeneral, wxID_ANY, _("Check for new version at startup"), wxDefaultPosition, wxDLG_UNIT(m_panelGeneral, wxSize(-1,-1)), 0);
    m_checkBoxCheck4NewVersionAtStart->SetValue(true);
    m_checkBoxCheck4NewVersionAtStart->SetToolTip(_("Check for new version at startup"));
    
    staticBoxSizerDlgStartup->Add(m_checkBoxCheck4NewVersionAtStart, 0, wxALL, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizerDlgToolbar = new wxStaticBoxSizer( new wxStaticBox(m_panelGeneral, wxID_ANY, _("Toolbar")), wxVERTICAL);
    
    gridSizerGenMisc->Add(staticBoxSizerDlgToolbar, 0, wxRIGHT|wxEXPAND, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer476 = new wxBoxSizer(wxVERTICAL);
    
    staticBoxSizerDlgToolbar->Add(boxSizer476, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_checkBoxToolbarText = new wxCheckBox(m_panelGeneral, wxID_ANY, _("Show toolbar text"), wxDefaultPosition, wxDLG_UNIT(m_panelGeneral, wxSize(-1,-1)), 0);
    m_checkBoxToolbarText->SetValue(false);
    m_checkBoxToolbarText->SetToolTip(_("Show toolbar text as well as icons"));
    m_checkBoxToolbarText->Enable(false);
    
    boxSizer476->Add(m_checkBoxToolbarText, 0, wxALL, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizerDestOverWrite = new wxStaticBoxSizer( new wxStaticBox(m_panelGeneral, wxID_ANY, _("Destination overwrite")), wxVERTICAL);
    
    gridSizerGenMisc->Add(staticBoxSizerDestOverWrite, 0, wxLEFT|wxEXPAND, WXC_FROM_DIP(5));
    
    m_checkBoxDisplayDestnWarning = new wxCheckBox(m_panelGeneral, wxID_ANY, _("Display warning"), wxDefaultPosition, wxDLG_UNIT(m_panelGeneral, wxSize(-1,-1)), 0);
    m_checkBoxDisplayDestnWarning->SetValue(true);
    m_checkBoxDisplayDestnWarning->SetToolTip(_("Display a warning at the close of the job editor when\nthe current job will overwrite data in an existing directory."));
    
    staticBoxSizerDestOverWrite->Add(m_checkBoxDisplayDestnWarning, 0, wxALL, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizerDlgShowFullPath = new wxStaticBoxSizer( new wxStaticBox(m_panelGeneral, wxID_ANY, _("In Job Edit Dialog")), wxVERTICAL);
    
    gridSizerGenMisc->Add(staticBoxSizerDlgShowFullPath, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    m_checkBoxShowFullJobPath = new wxCheckBox(m_panelGeneral, wxID_ANY, _("Show full job file path"), wxDefaultPosition, wxDLG_UNIT(m_panelGeneral, wxSize(-1,-1)), 0);
    m_checkBoxShowFullJobPath->SetValue(true);
    m_checkBoxShowFullJobPath->SetToolTip(_("Select whether to show the full job file path or only its name & extension"));
    
    staticBoxSizerDlgShowFullPath->Add(m_checkBoxShowFullJobPath, 0, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString m_radioBoxRemovableArr;
    m_radioBoxRemovableArr.Add(_("Use Serial Number"));
    m_radioBoxRemovableArr.Add(_("Use Volume Name"));
    m_radioBoxRemovable = new wxRadioBox(m_panelGeneral, wxID_ANY, _("Removable Drives:"), wxDefaultPosition, wxDLG_UNIT(m_panelGeneral, wxSize(-1,-1)), m_radioBoxRemovableArr, 1, 0);
    m_radioBoxRemovable->SetToolTip(_("For removable drives, you can specify whether the default\nwill be to identify them by Serial Number or Volume Label."));
    m_radioBoxRemovable->SetSelection(0);
    
    staticBoxSizerDlgShowFullPath->Add(m_radioBoxRemovable, 0, wxEXPAND, WXC_FROM_DIP(1));
    
    wxStaticBoxSizer* staticBoxSizerDlgTempDir = new wxStaticBoxSizer( new wxStaticBox(m_panelGeneral, wxID_ANY, _("Temporary directory:")), wxVERTICAL);
    
    boxSizer365->Add(staticBoxSizerDlgTempDir, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    m_checkBoxOptLogUseTempDefaultPath = new wxCheckBox(m_panelGeneral, wxID_ANY, _("Use default path"), wxDefaultPosition, wxDLG_UNIT(m_panelGeneral, wxSize(-1,-1)), 0);
    m_checkBoxOptLogUseTempDefaultPath->SetValue(false);
    
    staticBoxSizerDlgTempDir->Add(m_checkBoxOptLogUseTempDefaultPath, 0, wxALL, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizerTempPath = new wxStaticBoxSizer( new wxStaticBox(m_panelGeneral, wxID_ANY, _("Path:")), wxHORIZONTAL);
    
    staticBoxSizerDlgTempDir->Add(staticBoxSizerTempPath, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    m_dirPickerOptTempFilesDir = new wxDirPickerCtrl(m_panelGeneral, wxID_ANY, wxEmptyString, _("Select a folder"), wxDefaultPosition, wxDLG_UNIT(m_panelGeneral, wxSize(-1,-1)), wxDIRP_SMALL|wxDIRP_DEFAULT_STYLE);
    m_dirPickerOptTempFilesDir->SetToolTip(_("Select the temporary directory to be used for testing a job."));
    
    staticBoxSizerTempPath->Add(m_dirPickerOptTempFilesDir, 1, 0, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizerDlgBagSize = new wxStaticBoxSizer( new wxStaticBox(m_panelGeneral, wxID_ANY, _("Bag Size")), wxVERTICAL);
    
    boxSizer365->Add(staticBoxSizerDlgBagSize, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    wxArrayString m_choiceDlgOutputBagSizeArr;
    m_choiceDlgOutputBagSizeArr.Add(wxT("choices in source code are part of an enum"));
    m_choiceDlgOutputBagSize = new wxChoice(m_panelGeneral, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelGeneral, wxSize(-1,-1)), m_choiceDlgOutputBagSizeArr, 0);
    m_choiceDlgOutputBagSize->SetToolTip(_("Select the default 'bag' size to be used."));
    m_choiceDlgOutputBagSize->SetSelection(0);
    
    staticBoxSizerDlgBagSize->Add(m_choiceDlgOutputBagSize, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    m_panelLog = new wxPanel(m_nbOptions, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_nbOptions, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_nbOptions->AddPage(m_panelLog, _("Log"), false);
    
    wxBoxSizer* boxSizer234 = new wxBoxSizer(wxVERTICAL);
    m_panelLog->SetSizer(boxSizer234);
    
    m_checkBoxClearLogAtStart = new wxCheckBox(m_panelLog, wxID_ANY, _("Clear log window at start of job"), wxDefaultPosition, wxDLG_UNIT(m_panelLog, wxSize(-1,-1)), 0);
    m_checkBoxClearLogAtStart->SetValue(true);
    
    boxSizer234->Add(m_checkBoxClearLogAtStart, 0, wxALL, WXC_FROM_DIP(5));
    
    m_checkBoxClearLogAtTest = new wxCheckBox(m_panelLog, wxID_ANY, _("Clear log window at start of test"), wxDefaultPosition, wxDLG_UNIT(m_panelLog, wxSize(-1,-1)), 0);
    m_checkBoxClearLogAtTest->SetValue(true);
    
    boxSizer234->Add(m_checkBoxClearLogAtTest, 0, wxALL, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizerLog = new wxStaticBoxSizer( new wxStaticBox(m_panelLog, wxID_ANY, _("Logging Destination:")), wxVERTICAL);
    
    boxSizer234->Add(staticBoxSizerLog, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_checkBoxOptLogToFile = new wxCheckBox(m_panelLog, wxID_ANY, _("Log to file"), wxDefaultPosition, wxDLG_UNIT(m_panelLog, wxSize(-1,-1)), 0);
    m_checkBoxOptLogToFile->SetValue(false);
    
    staticBoxSizerLog->Add(m_checkBoxOptLogToFile, 0, wxALL, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizer26 = new wxStaticBoxSizer( new wxStaticBox(m_panelLog, wxID_ANY, _("Log file directory:")), wxVERTICAL);
    
    staticBoxSizerLog->Add(staticBoxSizer26, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    m_checkBoxOptLogUseDefaultPath = new wxCheckBox(m_panelLog, wxID_ANY, _("Use default path"), wxDefaultPosition, wxDLG_UNIT(m_panelLog, wxSize(-1,-1)), 0);
    m_checkBoxOptLogUseDefaultPath->SetValue(false);
    
    staticBoxSizer26->Add(m_checkBoxOptLogUseDefaultPath, 0, wxALL, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizerPath = new wxStaticBoxSizer( new wxStaticBox(m_panelLog, wxID_ANY, _("Path:")), wxHORIZONTAL);
    
    staticBoxSizer26->Add(staticBoxSizerPath, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    m_textCtrlOptLogFilesDestDir = new wxTextCtrl(m_panelLog, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelLog, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlOptLogFilesDestDir->SetHint(wxT(""));
    #endif
    
    staticBoxSizerPath->Add(m_textCtrlOptLogFilesDestDir, 1, 0, WXC_FROM_DIP(5));
    
    m_buttonOptLogSelLogFilesDir = new wxButton(m_panelLog, wxID_SELCT_LOG_DIR, _("..."), wxDefaultPosition, wxDLG_UNIT(m_panelLog, wxSize(-1,-1)), wxBU_EXACTFIT);
    
    staticBoxSizerPath->Add(m_buttonOptLogSelLogFilesDir, 0, wxLEFT, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizer36 = new wxStaticBoxSizer( new wxStaticBox(m_panelLog, wxID_ANY, _("Verbosity")), wxVERTICAL);
    
    staticBoxSizerLog->Add(staticBoxSizer36, 0, wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    
    m_sliderOptLogVerbosity = new wxSlider(m_panelLog, wxID_ANY, 0, 0, 5, wxDefaultPosition, wxDLG_UNIT(m_panelLog, wxSize(-1,-1)), wxSL_BOTTOM|wxSL_LABELS|wxSL_HORIZONTAL);
    
    staticBoxSizer36->Add(m_sliderOptLogVerbosity, 0, 0, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizerOptLogOptions = new wxStaticBoxSizer( new wxStaticBox(m_panelLog, wxID_ANY, _("Log Options")), wxHORIZONTAL);
    
    staticBoxSizerLog->Add(staticBoxSizerOptLogOptions, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    wxArrayString m_radioBoxNewLogWhenArr;
    m_radioBoxNewLogWhenArr.Add(_("ignore"));
    m_radioBoxNewLogWhenArr.Add(_("job"));
    m_radioBoxNewLogWhenArr.Add(_("day"));
    m_radioBoxNewLogWhen = new wxRadioBox(m_panelLog, wxID_ANY, _("New Log file every"), wxDefaultPosition, wxDLG_UNIT(m_panelLog, wxSize(-1,-1)), m_radioBoxNewLogWhenArr, 1, 0);
    m_radioBoxNewLogWhen->SetSelection(0);
    
    staticBoxSizerOptLogOptions->Add(m_radioBoxNewLogWhen, 0, wxALL, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer44 = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizerOptLogOptions->Add(boxSizer44, 1, wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText46 = new wxStaticText(m_panelLog, wxID_ANY, _("Delete files older than"), wxDefaultPosition, wxDLG_UNIT(m_panelLog, wxSize(-1,-1)), 0);
    m_staticText46->Enable(false);
    
    boxSizer44->Add(m_staticText46, 0, wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_spinCtrlLogLife = new wxSpinCtrl(m_panelLog, wxID_ANY, wxT("0"), wxDefaultPosition, wxDLG_UNIT(m_panelLog, wxSize(-1,-1)), wxSP_ARROW_KEYS);
    m_spinCtrlLogLife->Enable(false);
    m_spinCtrlLogLife->SetRange(0, 10);
    m_spinCtrlLogLife->SetValue(0);
    
    boxSizer44->Add(m_spinCtrlLogLife, 0, wxLEFT|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_staticText50 = new wxStaticText(m_panelLog, wxID_ANY, _("days"), wxDefaultPosition, wxDLG_UNIT(m_panelLog, wxSize(-1,-1)), 0);
    m_staticText50->Enable(false);
    
    boxSizer44->Add(m_staticText50, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_panelTasks = new wxPanel(m_nbOptions, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_nbOptions, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_panelTasks->Hide();
    m_panelTasks->Enable(false);
    m_nbOptions->AddPage(m_panelTasks, _("Tasks"), false);
    
    wxBoxSizer* boxSizer1114 = new wxBoxSizer(wxVERTICAL);
    m_panelTasks->SetSizer(boxSizer1114);
    
    wxStaticBoxSizer* staticBoxSizer1116 = new wxStaticBoxSizer( new wxStaticBox(m_panelTasks, wxID_ANY, _("E-Mail Clients found:")), wxVERTICAL);
    
    boxSizer1114->Add(staticBoxSizer1116, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_listCtrlOptEmailClients = new wxListCtrl(m_panelTasks, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelTasks, wxSize(-1,-1)), wxLC_REPORT);
    m_listCtrlOptEmailClients->SetToolTip(_("E-mail clients found"));
    
    staticBoxSizer1116->Add(m_listCtrlOptEmailClients, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    wxGridSizer* gridSizer1120 = new wxGridSizer(0, 2, 0, 0);
    
    boxSizer1114->Add(gridSizer1120, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_checkBoxOptKillRestart = new wxCheckBox(m_panelTasks, wxID_ANY, _("Kill && Restart Client"), wxDefaultPosition, wxDLG_UNIT(m_panelTasks, wxSize(-1,-1)), 0);
    m_checkBoxOptKillRestart->SetValue(false);
    m_checkBoxOptKillRestart->SetToolTip(_("If checked, stop the e-mail client, if it is running at start of\nbackup, and restart it after backup is finished."));
    
    gridSizer1120->Add(m_checkBoxOptKillRestart, 0, wxALL, WXC_FROM_DIP(5));
    
    m_panelSound = new wxPanel(m_nbOptions, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_nbOptions, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_nbOptions->AddPage(m_panelSound, _("Sound"), false);
    
    wxBoxSizer* boxSizer1256 = new wxBoxSizer(wxVERTICAL);
    m_panelSound->SetSizer(boxSizer1256);
    
    wxStaticBoxSizer* staticBoxSizerSound1 = new wxStaticBoxSizer( new wxStaticBox(m_panelSound, wxID_ANY, _("Sound")), wxVERTICAL);
    
    boxSizer1256->Add(staticBoxSizerSound1, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_checkBoxSound = new wxCheckBox(m_panelSound, wxID_ANY, _("Sound Feedback"), wxDefaultPosition, wxDLG_UNIT(m_panelSound, wxSize(-1,-1)), 0);
    m_checkBoxSound->SetValue(true);
    m_checkBoxSound->SetToolTip(_("Use sound feedback"));
    
    staticBoxSizerSound1->Add(m_checkBoxSound, 0, wxALL, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizer1262 = new wxStaticBoxSizer( new wxStaticBox(m_panelSound, wxID_ANY, _("Select sound:")), wxVERTICAL);
    
    staticBoxSizerSound1->Add(staticBoxSizer1262, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizer1264 = new wxStaticBoxSizer( new wxStaticBox(m_panelSound, wxID_ANY, _("Error")), wxVERTICAL);
    
    staticBoxSizer1262->Add(staticBoxSizer1264, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_filePickerSoundError = new wxFilePickerCtrl(m_panelSound, wxID_ANY, wxEmptyString, _("Select a file"), wxT("*.wav"), wxDefaultPosition, wxDLG_UNIT(m_panelSound, wxSize(-1,-1)), wxFLP_DEFAULT_STYLE|wxFLP_SMALL);
    m_filePickerSoundError->SetToolTip(_("Sound file to play on error"));
    
    staticBoxSizer1264->Add(m_filePickerSoundError, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizer126410 = new wxStaticBoxSizer( new wxStaticBox(m_panelSound, wxID_ANY, _("Warning")), wxVERTICAL);
    
    staticBoxSizer1262->Add(staticBoxSizer126410, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_filePickerSoundWarning = new wxFilePickerCtrl(m_panelSound, wxID_ANY, wxEmptyString, _("Select a file"), wxT("*.wav"), wxDefaultPosition, wxDLG_UNIT(m_panelSound, wxSize(-1,-1)), wxFLP_DEFAULT_STYLE|wxFLP_SMALL);
    m_filePickerSoundWarning->SetToolTip(_("Sound file to play on warning,\nsuch as file is to big."));
    
    staticBoxSizer126410->Add(m_filePickerSoundWarning, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizer1268 = new wxStaticBoxSizer( new wxStaticBox(m_panelSound, wxID_ANY, _("Completion")), wxVERTICAL);
    
    staticBoxSizer1262->Add(staticBoxSizer1268, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_filePickerSoundCompln = new wxFilePickerCtrl(m_panelSound, wxID_ANY, wxEmptyString, _("Select a file"), wxT("*.wav"), wxDefaultPosition, wxDLG_UNIT(m_panelSound, wxSize(-1,-1)), wxFLP_DEFAULT_STYLE|wxFLP_SMALL);
    m_filePickerSoundCompln->SetToolTip(_("Sound file to play on completion."));
    
    staticBoxSizer1268->Add(m_filePickerSoundCompln, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_panelEmail = new wxPanel(m_nbOptions, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_nbOptions, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_nbOptions->AddPage(m_panelEmail, _("Email"), false);
    
    wxBoxSizer* boxSizer12561 = new wxBoxSizer(wxVERTICAL);
    m_panelEmail->SetSizer(boxSizer12561);
    
    wxStaticBoxSizer* staticBoxSizerSound12 = new wxStaticBoxSizer( new wxStaticBox(m_panelEmail, wxID_ANY, _("Sound")), wxVERTICAL);
    
    boxSizer12561->Add(staticBoxSizerSound12, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_checkBoxDefaultEmail = new wxCheckBox(m_panelEmail, wxID_ANY, _("Use default e-mail data"), wxDefaultPosition, wxDLG_UNIT(m_panelEmail, wxSize(-1,-1)), 0);
    m_checkBoxDefaultEmail->SetValue(true);
    m_checkBoxDefaultEmail->SetToolTip(_("Use the default e-mail data for new jobs"));
    
    staticBoxSizerSound12->Add(m_checkBoxDefaultEmail, 0, wxALL, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizerDefaultEmail = new wxStaticBoxSizer( new wxStaticBox(m_panelEmail, wxID_ANY, _("Default Data:")), wxVERTICAL);
    
    staticBoxSizerSound12->Add(staticBoxSizerDefaultEmail, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizerDefaultServer = new wxStaticBoxSizer( new wxStaticBox(m_panelEmail, wxID_ANY, _("Server:")), wxVERTICAL);
    
    staticBoxSizerDefaultEmail->Add(staticBoxSizerDefaultServer, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_textCtrlDefaultServer = new wxTextCtrl(m_panelEmail, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelEmail, wxSize(-1,-1)), 0);
    m_textCtrlDefaultServer->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DLIGHT));
    m_textCtrlDefaultServer->SetToolTip(_("Must be of the form: smtp://smtp.your.isp"));
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlDefaultServer->SetHint(_("smtp://smtp.your.isp"));
    #endif
    
    staticBoxSizerDefaultServer->Add(m_textCtrlDefaultServer, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizerDefaultFrom = new wxStaticBoxSizer( new wxStaticBox(m_panelEmail, wxID_ANY, _("From:")), wxVERTICAL);
    
    staticBoxSizerDefaultEmail->Add(staticBoxSizerDefaultFrom, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_textCtrlDefaultFrom = new wxTextCtrl(m_panelEmail, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelEmail, wxSize(-1,-1)), 0);
    m_textCtrlDefaultFrom->SetToolTip(_("Must be a valid email address at the SMTP server"));
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlDefaultFrom->SetHint(_("your-email@your.isp"));
    #endif
    
    staticBoxSizerDefaultFrom->Add(m_textCtrlDefaultFrom, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizerDefaultTo = new wxStaticBoxSizer( new wxStaticBox(m_panelEmail, wxID_ANY, _("To:")), wxVERTICAL);
    
    staticBoxSizerDefaultEmail->Add(staticBoxSizerDefaultTo, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_textCtrlDefaultTo = new wxTextCtrl(m_panelEmail, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelEmail, wxSize(-1,-1)), 0);
    m_textCtrlDefaultTo->SetToolTip(_("Must be a valid email address at the destination server"));
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlDefaultTo->SetHint(_("some-name@some.isp"));
    #endif
    
    staticBoxSizerDefaultTo->Add(m_textCtrlDefaultTo, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizerDefaultSubject = new wxStaticBoxSizer( new wxStaticBox(m_panelEmail, wxID_ANY, _("Subject:")), wxVERTICAL);
    
    staticBoxSizerDefaultEmail->Add(staticBoxSizerDefaultSubject, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_textCtrlDefaultSubject = new wxTextCtrl(m_panelEmail, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelEmail, wxSize(-1,-1)), 0);
    m_textCtrlDefaultSubject->SetToolTip(_("Some text describing the email"));
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlDefaultSubject->SetHint(_("wxBup task completion from PCxxx"));
    #endif
    
    staticBoxSizerDefaultSubject->Add(m_textCtrlDefaultSubject, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxBoxSizer* bSizer28 = new wxBoxSizer(wxHORIZONTAL);
    
    bSizer27->Add(bSizer28, 0, wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    
    m_OptGeneralOK = new wxButton(this, wxID_OK, _("OK"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    
    bSizer28->Add(m_OptGeneralOK, 0, wxALL, WXC_FROM_DIP(5));
    
    m_OptGeneralCancel = new wxButton(this, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    
    bSizer28->Add(m_OptGeneralCancel, 0, wxALL, WXC_FROM_DIP(5));
    
    m_OptGeneralHelp = new wxButton(this, wxID_HELP, _("Help"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_OptGeneralHelp->SetDefault();
    m_OptGeneralHelp->Enable(false);
    
    bSizer28->Add(m_OptGeneralHelp, 0, wxALL, WXC_FROM_DIP(5));
    
    SetName(wxT("MyBaseOptionsDialog"));
    SetSize(-1,-1);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent();
    } else {
        CentreOnScreen();
    }
    // Connect events
    m_checkBoxOptLogUseTempDefaultPath->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(MyBaseOptionsDialog::OnOptDlgGen_UseDefaultTempDirClick), NULL, this);
    m_checkBoxClearLogAtStart->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(MyBaseOptionsDialog::OnOptDlgLog_ClearLogAtStart), NULL, this);
    m_checkBoxOptLogToFile->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(MyBaseOptionsDialog::OnOptDlgLog_Log2FileClick), NULL, this);
    m_checkBoxOptLogUseDefaultPath->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(MyBaseOptionsDialog::OnOptDlgLog_DefPathClick), NULL, this);
    m_buttonOptLogSelLogFilesDir->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MyBaseOptionsDialog::OnOptDlgLog_SelLogFilePathClick), NULL, this);
    m_checkBoxSound->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(MyBaseOptionsDialog::OnOptDlgSnd_WantSound), NULL, this);
    m_filePickerSoundError->Connect(wxEVT_COMMAND_FILEPICKER_CHANGED, wxFileDirPickerEventHandler(MyBaseOptionsDialog::OnOptDlgSnd_OnSelectErrorSound), NULL, this);
    m_filePickerSoundWarning->Connect(wxEVT_COMMAND_FILEPICKER_CHANGED, wxFileDirPickerEventHandler(MyBaseOptionsDialog::OnOptDlgSnd_OnSelectWarningSound), NULL, this);
    m_filePickerSoundCompln->Connect(wxEVT_COMMAND_FILEPICKER_CHANGED, wxFileDirPickerEventHandler(MyBaseOptionsDialog::OnOptDlgSnd_OnSelectCompletionSound), NULL, this);
    
}

MyBaseOptionsDialog::~MyBaseOptionsDialog()
{
    m_checkBoxOptLogUseTempDefaultPath->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(MyBaseOptionsDialog::OnOptDlgGen_UseDefaultTempDirClick), NULL, this);
    m_checkBoxClearLogAtStart->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(MyBaseOptionsDialog::OnOptDlgLog_ClearLogAtStart), NULL, this);
    m_checkBoxOptLogToFile->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(MyBaseOptionsDialog::OnOptDlgLog_Log2FileClick), NULL, this);
    m_checkBoxOptLogUseDefaultPath->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(MyBaseOptionsDialog::OnOptDlgLog_DefPathClick), NULL, this);
    m_buttonOptLogSelLogFilesDir->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MyBaseOptionsDialog::OnOptDlgLog_SelLogFilePathClick), NULL, this);
    m_checkBoxSound->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(MyBaseOptionsDialog::OnOptDlgSnd_WantSound), NULL, this);
    m_filePickerSoundError->Disconnect(wxEVT_COMMAND_FILEPICKER_CHANGED, wxFileDirPickerEventHandler(MyBaseOptionsDialog::OnOptDlgSnd_OnSelectErrorSound), NULL, this);
    m_filePickerSoundWarning->Disconnect(wxEVT_COMMAND_FILEPICKER_CHANGED, wxFileDirPickerEventHandler(MyBaseOptionsDialog::OnOptDlgSnd_OnSelectWarningSound), NULL, this);
    m_filePickerSoundCompln->Disconnect(wxEVT_COMMAND_FILEPICKER_CHANGED, wxFileDirPickerEventHandler(MyBaseOptionsDialog::OnOptDlgSnd_OnSelectCompletionSound), NULL, this);
    
}

wxBupRestoreDlgBase::wxBupRestoreDlgBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCE65CInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* boxSizer317 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer317);
    
    m_panelSource = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    boxSizer317->Add(m_panelSource, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer731 = new wxBoxSizer(wxVERTICAL);
    m_panelSource->SetSizer(boxSizer731);
    
    wxStaticBoxSizer* staticBoxSizerSource = new wxStaticBoxSizer( new wxStaticBox(m_panelSource, wxID_ANY, _("Source")), wxVERTICAL);
    
    boxSizer731->Add(staticBoxSizerSource, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    m_dirPickerRestoreSrc = new wxDirPickerCtrl(m_panelSource, wxID_ANY, wxEmptyString, _("Select a folder"), wxDefaultPosition, wxDLG_UNIT(m_panelSource, wxSize(-1,-1)), wxDIRP_SMALL|wxDIRP_DEFAULT_STYLE);
    m_dirPickerRestoreSrc->SetToolTip(_("Base directory of data to be restored or tested."));
    
    staticBoxSizerSource->Add(m_dirPickerRestoreSrc, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    m_panelTarget = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    boxSizer317->Add(m_panelTarget, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer738 = new wxBoxSizer(wxVERTICAL);
    m_panelTarget->SetSizer(boxSizer738);
    
    wxStaticBoxSizer* staticBoxSizerTarget = new wxStaticBoxSizer( new wxStaticBox(m_panelTarget, wxID_ANY, _("Target")), wxVERTICAL);
    
    boxSizer738->Add(staticBoxSizerTarget, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    m_dirPickerRestoreTarget = new wxDirPickerCtrl(m_panelTarget, wxID_ANY, wxEmptyString, _("Select a folder"), wxDefaultPosition, wxDLG_UNIT(m_panelTarget, wxSize(-1,-1)), wxDIRP_SMALL|wxDIRP_DEFAULT_STYLE);
    m_dirPickerRestoreTarget->SetToolTip(_("Directory to hold the restored data."));
    
    staticBoxSizerTarget->Add(m_dirPickerRestoreTarget, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizerClearTarget = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizerTarget->Add(boxSizerClearTarget, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    
    m_checkBoxClearTarget = new wxCheckBox(m_panelTarget, wxID_ANY, _("Clear target"), wxDefaultPosition, wxDLG_UNIT(m_panelTarget, wxSize(-1,-1)), 0);
    m_checkBoxClearTarget->SetValue(true);
    m_checkBoxClearTarget->SetToolTip(_("Clear the target directory after the test"));
    
    boxSizerClearTarget->Add(m_checkBoxClearTarget, 0, wxALL, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer32510 = new wxBoxSizer(wxHORIZONTAL);
    
    boxSizer317->Add(boxSizer32510, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    
    m_buttonOK11 = new wxButton(this, wxID_OK, _("OK"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer32510->Add(m_buttonOK11, 0, wxALL, WXC_FROM_DIP(5));
    
    m_buttonCancel12 = new wxButton(this, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer32510->Add(m_buttonCancel12, 0, wxALL, WXC_FROM_DIP(5));
    
    SetName(wxT("wxBupRestoreDlgBase"));
    SetMinClientSize(wxSize(300,-1));
    SetSize(-1,-1);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
}

wxBupRestoreDlgBase::~wxBupRestoreDlgBase()
{
}

wxBupJobDataDlgBase::wxBupJobDataDlgBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCE65CInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* boxSizerJobDlg = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizerJobDlg);
    
    m_treebookJob = new wxTreebook(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxBK_DEFAULT);
    m_treebookJob->SetName(wxT("m_treebookJob"));
    
    boxSizerJobDlg->Add(m_treebookJob, 1, wxALL, WXC_FROM_DIP(5));
    
    m_panelMainJobName = new wxPanel(m_treebookJob, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_treebookJob, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_treebookJob->AddPage(m_panelMainJobName, _("General"), false, wxNOT_FOUND);
    
    wxBoxSizer* boxSizerGeneralPage = new wxBoxSizer(wxHORIZONTAL);
    m_panelMainJobName->SetSizer(boxSizerGeneralPage);
    
    m_panelGeneral = new wxPanel(m_panelMainJobName, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelMainJobName, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    boxSizerGeneralPage->Add(m_panelGeneral, 1, wxEXPAND, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizerGeneral = new wxBoxSizer(wxVERTICAL);
    m_panelGeneral->SetSizer(boxSizerGeneral);
    
    m_staticTextTaskGeneral = new wxStaticText(m_panelGeneral, wxID_ANY, _("New Task  - General"), wxDefaultPosition, wxDLG_UNIT(m_panelGeneral, wxSize(-1,-1)), 0);
    
    boxSizerGeneral->Add(m_staticTextTaskGeneral, 0, wxLEFT|wxTOP, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizerTaskName = new wxStaticBoxSizer( new wxStaticBox(m_panelGeneral, wxID_ANY, _("Task name")), wxVERTICAL);
    
    boxSizerGeneral->Add(staticBoxSizerTaskName, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    m_textCtrlTaskName = new wxTextCtrl(m_panelGeneral, wxID_NJ_TASK_NAME, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelGeneral, wxSize(-1,-1)), 0);
    m_textCtrlTaskName->SetToolTip(_("As this name will be used to construct the job file name\nit needs to conform to the Windows file name conventions\nand restrictions."));
    m_textCtrlTaskName->SetFocus();
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlTaskName->SetHint(wxT(""));
    #endif
    
    staticBoxSizerTaskName->Add(m_textCtrlTaskName, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizerGeneral = new wxStaticBoxSizer( new wxStaticBox(m_panelGeneral, wxID_ANY, _("General Settings")), wxVERTICAL);
    
    boxSizerGeneral->Add(staticBoxSizerGeneral, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    m_checkBoxJobEnabled = new wxCheckBox(m_panelGeneral, wxID_NJ_ENABLED, _("Enabled"), wxDefaultPosition, wxDLG_UNIT(m_panelGeneral, wxSize(-1,-1)), 0);
    m_checkBoxJobEnabled->SetValue(true);
    
    staticBoxSizerGeneral->Add(m_checkBoxJobEnabled, 0, wxALL, WXC_FROM_DIP(5));
    
    m_checkBoxJobIncludeSubDirs = new wxCheckBox(m_panelGeneral, wxID_NJ_INCLSUBDIRS, _("Include subdirectories"), wxDefaultPosition, wxDLG_UNIT(m_panelGeneral, wxSize(-1,-1)), 0);
    m_checkBoxJobIncludeSubDirs->SetValue(true);
    
    staticBoxSizerGeneral->Add(m_checkBoxJobIncludeSubDirs, 0, wxALL, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizerBackupType = new wxStaticBoxSizer( new wxStaticBox(m_panelGeneral, wxID_ANY, _("Backup Type")), wxHORIZONTAL);
    
    boxSizerGeneral->Add(staticBoxSizerBackupType, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer1472 = new wxBoxSizer(wxVERTICAL);
    
    staticBoxSizerBackupType->Add(boxSizer1472, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxArrayString m_radioBoxBackupTypeArr;
    m_radioBoxBackupTypeArr.Add(_("Full"));
    m_radioBoxBackupTypeArr.Add(_("Differential"));
    m_radioBoxBackupType = new wxRadioBox(m_panelGeneral, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelGeneral, wxSize(-1,-1)), m_radioBoxBackupTypeArr, 1, 0);
    m_radioBoxBackupType->SetSelection(0);
    
    boxSizer1472->Add(m_radioBoxBackupType, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer1250 = new wxBoxSizer(wxVERTICAL);
    
    staticBoxSizerBackupType->Add(boxSizer1250, 0, wxLEFT|wxTOP|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticTextBackupTypeExplain = new wxStaticText(m_panelGeneral, wxID_ANY, _("Explains 'archive' bit state - changes when  radio buttons are changed"), wxDefaultPosition, wxDLG_UNIT(m_panelGeneral, wxSize(-1,-1)), wxST_NO_AUTORESIZE|wxALIGN_LEFT);
    
    boxSizer1250->Add(m_staticTextBackupTypeExplain, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizerJobComments = new wxStaticBoxSizer( new wxStaticBox(m_panelGeneral, wxID_ANY, _("Comments")), wxVERTICAL);
    
    boxSizerGeneral->Add(staticBoxSizerJobComments, 1, wxEXPAND, WXC_FROM_DIP(5));
    
    m_textCtrlJobComments = new wxTextCtrl(m_panelGeneral, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelGeneral, wxSize(-1,-1)), wxTE_RICH2|wxTE_RICH|wxTE_MULTILINE);
    m_textCtrlJobComments->SetToolTip(_("Comments or explanation of job's purpose or limitations"));
    
    staticBoxSizerJobComments->Add(m_textCtrlJobComments, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_panelMainFiles = new wxPanel(m_treebookJob, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_treebookJob, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_treebookJob->AddPage(m_panelMainFiles, _("Files"), false, wxNOT_FOUND);
    
    wxBoxSizer* boxSizerFilesPage = new wxBoxSizer(wxHORIZONTAL);
    m_panelMainFiles->SetSizer(boxSizerFilesPage);
    
    m_panelFiles = new wxPanel(m_panelMainFiles, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelMainFiles, wxSize(-1,-1)), wxFULL_REPAINT_ON_RESIZE|wxTAB_TRAVERSAL);
    
    boxSizerFilesPage->Add(m_panelFiles, 1, wxEXPAND, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer50841468 = new wxBoxSizer(wxVERTICAL);
    m_panelFiles->SetSizer(boxSizer50841468);
    
    m_staticTextTaskFiles = new wxStaticText(m_panelFiles, wxID_ANY, _("New Task  - Files"), wxDefaultPosition, wxDLG_UNIT(m_panelFiles, wxSize(-1,-1)), 0);
    
    boxSizer50841468->Add(m_staticTextTaskFiles, 0, wxLEFT|wxTOP, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizerDestn = new wxStaticBoxSizer( new wxStaticBox(m_panelFiles, wxID_ANY, _("Destination")), wxVERTICAL);
    
    boxSizer50841468->Add(staticBoxSizerDestn, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    m_dirPickerDestinationDir = new wxDirPickerCtrl(m_panelFiles, wxID_NJ_DESTIN, wxEmptyString, _("Select a destination folder"), wxDefaultPosition, wxDLG_UNIT(m_panelFiles, wxSize(-1,-1)), wxDIRP_SMALL|wxDIRP_DEFAULT_STYLE|wxDIRP_USE_TEXTCTRL|wxFULL_REPAINT_ON_RESIZE);
    m_dirPickerDestinationDir->SetToolTip(_("Enter a destination directory for the backup 'bags'\nThe string {date} will be expanded on output to the current date\nin the format yyyymmdd.\nIt can form part or all of a directory name."));
    m_dirPickerDestinationDir->SetFocus();
    
    staticBoxSizerDestn->Add(m_dirPickerDestinationDir, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizerDestInfo = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizerDestn->Add(boxSizerDestInfo, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxArrayString m_radioBoxDestnMediaArr;
    m_radioBoxDestnMediaArr.Add(_("Serial Number:"));
    m_radioBoxDestnMediaArr.Add(_("Volume Name:"));
    m_radioBoxDestnMedia = new wxRadioBox(m_panelFiles, wxID_ANY, _("Identify Destination Drive by:"), wxDefaultPosition, wxDLG_UNIT(m_panelFiles, wxSize(-1,-1)), m_radioBoxDestnMediaArr, 1, wxRA_SPECIFY_COLS);
    m_radioBoxDestnMedia->SetToolTip(_("Under Windows, destination drives can be fixed or removable.\nTo identify the destiantion uniquely the application can use\neither the drive serial number or vaolume name."));
    m_radioBoxDestnMedia->SetSelection(0);
    
    boxSizerDestInfo->Add(m_radioBoxDestnMedia, 1, wxEXPAND, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizerDestnNotes = new wxStaticBoxSizer( new wxStaticBox(m_panelFiles, wxID_ANY, wxT("")), wxVERTICAL);
    
    boxSizerDestInfo->Add(staticBoxSizerDestnNotes, 1, wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticTextDestnNotes = new wxStaticText(m_panelFiles, wxID_ANY, _("Explain if there is a problem \nwith the selected destination path"), wxDefaultPosition, wxDLG_UNIT(m_panelFiles, wxSize(-1,-1)), 0);
    
    staticBoxSizerDestnNotes->Add(m_staticTextDestnNotes, 0, wxALL, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizerSource = new wxStaticBoxSizer( new wxStaticBox(m_panelFiles, wxID_ANY, _("Source")), wxVERTICAL);
    
    boxSizer50841468->Add(staticBoxSizerSource, 2, wxEXPAND, WXC_FROM_DIP(5));
    
    m_splitterJobEditFiles = new wxSplitterWindow(m_panelFiles, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelFiles, wxSize(-1,-1)), wxSP_3DBORDER|wxSP_3DSASH|wxFULL_REPAINT_ON_RESIZE);
    m_splitterJobEditFiles->SetSashGravity(0.5);
    m_splitterJobEditFiles->SetMinimumPaneSize(10);
    
    staticBoxSizerSource->Add(m_splitterJobEditFiles, 1, wxEXPAND, WXC_FROM_DIP(5));
    
    m_splitterPageSourceList = new wxPanel(m_splitterJobEditFiles, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitterJobEditFiles, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    wxBoxSizer* boxSizer6641771 = new wxBoxSizer(wxVERTICAL);
    m_splitterPageSourceList->SetSizer(boxSizer6641771);
    
    wxBoxSizer* boxSizer6681872 = new wxBoxSizer(wxVERTICAL);
    
    boxSizer6641771->Add(boxSizer6681872, 1, wxEXPAND, WXC_FROM_DIP(5));
    
    wxArrayString m_listBoxSourceArr;
    m_listBoxSource = new wxListBox(m_splitterPageSourceList, wxID_NJ_SOURCE_FILES, wxDefaultPosition, wxDLG_UNIT(m_splitterPageSourceList, wxSize(300, 300)), m_listBoxSourceArr, wxLB_NEEDED_SB|wxLB_HSCROLL|wxFULL_REPAINT_ON_RESIZE);
    m_listBoxSource->SetToolTip(_("Drag n Drop file or directories from\nthe file picker to the 'Source' list on the left."));
    
    boxSizer6681872->Add(m_listBoxSource, 0, 0, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer5442074 = new wxBoxSizer(wxHORIZONTAL);
    
    boxSizer6641771->Add(boxSizer5442074, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    m_buttonSrcDel = new wxButton(m_splitterPageSourceList, wxID_ANY, _("Delete"), wxDefaultPosition, wxDLG_UNIT(m_splitterPageSourceList, wxSize(-1,-1)), wxBU_EXACTFIT);
    m_buttonSrcDel->SetToolTip(_("Remove the selected source item"));
    
    boxSizer5442074->Add(m_buttonSrcDel, 0, wxLEFT|wxTOP, WXC_FROM_DIP(5));
    
    m_splitterPageDirPicker = new wxPanel(m_splitterJobEditFiles, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitterJobEditFiles, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_splitterPageDirPicker->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_SCROLLBAR));
    m_splitterJobEditFiles->SplitVertically(m_splitterPageSourceList, m_splitterPageDirPicker, 0);
    
    wxBoxSizer* boxSizer1214 = new wxBoxSizer(wxVERTICAL);
    m_splitterPageDirPicker->SetSizer(boxSizer1214);
    
    m_genericDirCtrlSrcPicker = new wxGenericDirCtrl(m_splitterPageDirPicker, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_splitterPageDirPicker, wxSize(300,-1)), wxDIRCTRL_SHOW_FILTERS|wxDIRCTRL_SELECT_FIRST|wxDIRCTRL_3D_INTERNAL|wxFULL_REPAINT_ON_RESIZE);
    m_genericDirCtrlSrcPicker->SetToolTip(_("Drag n Drop file or directories from\nthe file picker on the right.\n"));
    m_genericDirCtrlSrcPicker->ShowHidden(false);
    
    boxSizer1214->Add(m_genericDirCtrlSrcPicker, 1, wxLEFT|wxEXPAND, WXC_FROM_DIP(5));
    
    m_panelMainProperties = new wxPanel(m_treebookJob, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_treebookJob, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_treebookJob->AddPage(m_panelMainProperties, _("Properties"), false, wxNOT_FOUND);
    
    wxBoxSizer* boxSizerPropertiesPage = new wxBoxSizer(wxHORIZONTAL);
    m_panelMainProperties->SetSizer(boxSizerPropertiesPage);
    
    m_panelProperties2781 = new wxPanel(m_panelMainProperties, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelMainProperties, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    boxSizerPropertiesPage->Add(m_panelProperties2781, 0, wxALL, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer508302882 = new wxBoxSizer(wxVERTICAL);
    m_panelProperties2781->SetSizer(boxSizer508302882);
    
    m_staticTextTaskProperties = new wxStaticText(m_panelProperties2781, wxID_ANY, _("New Task  - Properties"), wxDefaultPosition, wxDLG_UNIT(m_panelProperties2781, wxSize(-1,-1)), 0);
    
    boxSizer508302882->Add(m_staticTextTaskProperties, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizerWizBaseName = new wxStaticBoxSizer( new wxStaticBox(m_panelProperties2781, wxID_ANY, _("Base Name")), wxVERTICAL);
    
    boxSizer508302882->Add(staticBoxSizerWizBaseName, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    m_textCtrlWizZipChunkBaseFileName = new wxTextCtrl(m_panelProperties2781, wxID_NJ_BASE_NAME, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelProperties2781, wxSize(-1,-1)), 0);
    m_textCtrlWizZipChunkBaseFileName->SetToolTip(_("Base name for 'bag' directories.\nCan be edited, but defaults to 'bag'"));
    m_textCtrlWizZipChunkBaseFileName->SetFocus();
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlWizZipChunkBaseFileName->SetHint(wxT(""));
    #endif
    
    staticBoxSizerWizBaseName->Add(m_textCtrlWizZipChunkBaseFileName, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizerWizBagSize = new wxStaticBoxSizer( new wxStaticBox(m_panelProperties2781, wxID_ANY, _("Bag Size")), wxVERTICAL);
    
    boxSizer508302882->Add(staticBoxSizerWizBagSize, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    wxArrayString m_choiceWizOutputBagSizeArr;
    m_choiceWizOutputBagSizeArr.Add(wxT("choices in source code are part of an enum"));
    m_choiceWizOutputBagSize = new wxChoice(m_panelProperties2781, wxID_NJ_BAG_SIZE, wxDefaultPosition, wxDLG_UNIT(m_panelProperties2781, wxSize(-1,-1)), m_choiceWizOutputBagSizeArr, 0);
    m_choiceWizOutputBagSize->SetToolTip(_("Select a 'bag' size corresponding to the backup media to be used."));
    m_choiceWizOutputBagSize->SetSelection(0);
    
    staticBoxSizerWizBagSize->Add(m_choiceWizOutputBagSize, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizerWizBagLog = new wxStaticBoxSizer( new wxStaticBox(m_panelProperties2781, wxID_ANY, _("Bag Content List")), wxVERTICAL);
    
    boxSizer508302882->Add(staticBoxSizerWizBagLog, 0, wxLEFT|wxRIGHT|wxEXPAND, WXC_FROM_DIP(5));
    
    m_checkBoxIncludeEmptyDirs = new wxCheckBox(m_panelProperties2781, wxID_NJ_INCL_MT_DIRS, _("Include empty directories"), wxDefaultPosition, wxDLG_UNIT(m_panelProperties2781, wxSize(-1,-1)), 0);
    m_checkBoxIncludeEmptyDirs->SetValue(false);
    m_checkBoxIncludeEmptyDirs->SetToolTip(_("Include empty directories in the backup"));
    
    staticBoxSizerWizBagLog->Add(m_checkBoxIncludeEmptyDirs, 0, wxALL, WXC_FROM_DIP(5));
    
    m_panelMainFilters = new wxPanel(m_treebookJob, wxID_NJ_MOVE_AS_IS, wxDefaultPosition, wxDLG_UNIT(m_treebookJob, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_panelMainFilters->SetFocus();
    m_treebookJob->AddPage(m_panelMainFilters, _("Filters"), false, wxNOT_FOUND);
    
    wxBoxSizer* boxSizerFilterPage91 = new wxBoxSizer(wxHORIZONTAL);
    m_panelMainFilters->SetSizer(boxSizerFilterPage91);
    
    m_panelFilters3892 = new wxPanel(m_panelMainFilters, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelMainFilters, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    boxSizerFilterPage91->Add(m_panelFilters3892, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer508523993 = new wxBoxSizer(wxVERTICAL);
    m_panelFilters3892->SetSizer(boxSizer508523993);
    
    m_staticTextTaskFilters = new wxStaticText(m_panelFilters3892, wxID_ANY, _("New Task  - Filters"), wxDefaultPosition, wxDLG_UNIT(m_panelFilters3892, wxSize(-1,-1)), 0);
    
    boxSizer508523993->Add(m_staticTextTaskFilters, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizerWizExcludedFiles = new wxStaticBoxSizer( new wxStaticBox(m_panelFilters3892, wxID_ANY, _("Excluded Files")), wxVERTICAL);
    
    boxSizer508523993->Add(staticBoxSizerWizExcludedFiles, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    wxArrayString m_comboBoxWizFileExclusionsArr;
    m_comboBoxWizFileExclusions = new wxComboBox(m_panelFilters3892, wxID_NJ_EXCLUSIONS, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelFilters3892, wxSize(-1,-1)), m_comboBoxWizFileExclusionsArr, 0);
    m_comboBoxWizFileExclusions->SetToolTip(_("File patterns for files to be excluded from backup.\nWild cards '*' & '?' are OK.\nExample: *.bak  excludes all files with the bak extension\n*.b?k  excludes all the above, plus *.bek, *..bzk .....\nCurrently no patterns are provided for excluding directories.\n"));
    #if wxVERSION_NUMBER >= 3000
    m_comboBoxWizFileExclusions->SetHint(wxT(""));
    #endif
    
    staticBoxSizerWizExcludedFiles->Add(m_comboBoxWizFileExclusions, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizerWizExcludedDirs = new wxStaticBoxSizer( new wxStaticBox(m_panelFilters3892, wxID_ANY, _("Excluded Directories")), wxVERTICAL);
    
    boxSizer508523993->Add(staticBoxSizerWizExcludedDirs, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    wxArrayString m_comboBoxWizDirExclusionsArr;
    m_comboBoxWizDirExclusions = new wxComboBox(m_panelFilters3892, wxID_NJ_EXCLUSIONS, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelFilters3892, wxSize(-1,-1)), m_comboBoxWizDirExclusionsArr, 0);
    m_comboBoxWizDirExclusions->SetToolTip(_("File patterns for files to be excluded from backup.\nWild cards '*' & '?' are OK.\nExample: *.bak  excludes all files with the bak extension\n*.b?k  excludes all the above, plus *.bek, *..bzk .....\nCurrently no patterns are provided for excluding directories.\n"));
    #if wxVERSION_NUMBER >= 3000
    m_comboBoxWizDirExclusions->SetHint(wxT(""));
    #endif
    
    staticBoxSizerWizExcludedDirs->Add(m_comboBoxWizDirExclusions, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizerWizMoveAsIs = new wxStaticBoxSizer( new wxStaticBox(m_panelFilters3892, wxID_ANY, _("Move files 'as is'")), wxVERTICAL);
    
    boxSizer508523993->Add(staticBoxSizerWizMoveAsIs, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    wxArrayString m_comboBoxMoveAsIsArr;
    m_comboBoxMoveAsIs = new wxComboBox(m_panelFilters3892, wxID_MOVE_AS_IS, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelFilters3892, wxSize(-1,-1)), m_comboBoxMoveAsIsArr, 0);
    m_comboBoxMoveAsIs->SetToolTip(_("File patterns for files to be excluded from compression,\nbut to be moved/copied 'as is'.\nWild cards '*' & '?' are OK.\nExample: *.zip  excludes all files with the zip extension\n*.z*  excludes all the above, plus *.z, *.zoo, but not *.7z or *.gz"));
    #if wxVERSION_NUMBER >= 3000
    m_comboBoxMoveAsIs->SetHint(wxT(""));
    #endif
    
    staticBoxSizerWizMoveAsIs->Add(m_comboBoxMoveAsIs, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    m_panelMainZip = new wxPanel(m_treebookJob, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_treebookJob, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_treebookJob->AddPage(m_panelMainZip, _("Zip"), false, wxNOT_FOUND);
    
    wxBoxSizer* boxSizerZipPage = new wxBoxSizer(wxHORIZONTAL);
    m_panelMainZip->SetSizer(boxSizerZipPage);
    
    m_panelZipEncrypt = new wxPanel(m_panelMainZip, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelMainZip, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    boxSizerZipPage->Add(m_panelZipEncrypt, 0, wxALL, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer5084148102 = new wxBoxSizer(wxVERTICAL);
    m_panelZipEncrypt->SetSizer(boxSizer5084148102);
    
    m_staticTextTaskZipEncrypt = new wxStaticText(m_panelZipEncrypt, wxID_ANY, _("New Task  - ZipEncrypt"), wxDefaultPosition, wxDLG_UNIT(m_panelZipEncrypt, wxSize(-1,-1)), 0);
    
    boxSizer5084148102->Add(m_staticTextTaskZipEncrypt, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_panel77250104 = new wxPanel(m_panelZipEncrypt, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelZipEncrypt, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    boxSizer5084148102->Add(m_panel77250104, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxGridSizer* gridSizer29391751105 = new wxGridSizer(0, 2, 0, 0);
    m_panel77250104->SetSizer(gridSizer29391751105);
    
    wxArrayString m_radioBoxWizZipOrMoveArr;
    m_radioBoxWizZipOrMoveArr.Add(_("Copy Only"));
    m_radioBoxWizZipOrMoveArr.Add(_("Zip && Copy"));
    m_radioBoxWizZipOrMove = new wxRadioBox(m_panel77250104, wxID_ANY, _("Copy or Zip"), wxDefaultPosition, wxDLG_UNIT(m_panel77250104, wxSize(-1,-1)), m_radioBoxWizZipOrMoveArr, 1, 0);
    m_radioBoxWizZipOrMove->SetToolTip(_("Select whether to\nZip and Move or\nMove only\nall files in the source directory."));
    m_radioBoxWizZipOrMove->SetSelection(1);
    
    gridSizer29391751105->Add(m_radioBoxWizZipOrMove, 0, wxLEFT|wxEXPAND, WXC_FROM_DIP(5));
    
    m_panelMainInterferingTasks = new wxPanel(m_treebookJob, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_treebookJob, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_treebookJob->AddPage(m_panelMainInterferingTasks, _("Interfering Tasks"), false, wxNOT_FOUND);
    
    wxBoxSizer* boxSizerMainInterferingTasks = new wxBoxSizer(wxVERTICAL);
    m_panelMainInterferingTasks->SetSizer(boxSizerMainInterferingTasks);
    
    m_panel1424 = new wxPanel(m_panelMainInterferingTasks, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelMainInterferingTasks, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    boxSizerMainInterferingTasks->Add(m_panel1424, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer1426 = new wxBoxSizer(wxVERTICAL);
    m_panel1424->SetSizer(boxSizer1426);
    
    m_staticTextInterferingTasks = new wxStaticText(m_panel1424, wxID_ANY, _("New Task  - Interfering Tasks"), wxDefaultPosition, wxDLG_UNIT(m_panel1424, wxSize(-1,-1)), 0);
    
    boxSizer1426->Add(m_staticTextInterferingTasks, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizerTasks2Kill1 = new wxStaticBoxSizer( new wxStaticBox(m_panel1424, wxID_ANY, _("Interfering Tasks")), wxVERTICAL);
    
    boxSizer1426->Add(staticBoxSizerTasks2Kill1, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxArrayString m_checkListBoxTasks2KillArr;
    m_checkListBoxTasks2KillArr.Add(_("Thunderbird"));
    m_checkListBoxTasks2Kill = new wxCheckListBox(m_panel1424, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panel1424, wxSize(-1,-1)), m_checkListBoxTasks2KillArr, wxLB_SINGLE);
    
    staticBoxSizerTasks2Kill1->Add(m_checkListBoxTasks2Kill, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizer11162 = new wxStaticBoxSizer( new wxStaticBox(m_panel1424, wxID_ANY, _("Tasks found:")), wxVERTICAL);
    
    boxSizer1426->Add(staticBoxSizer11162, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_textCtrlWizEmailClients = new wxTextCtrl(m_panel1424, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panel1424, wxSize(-1,-1)), wxTE_RICH2|wxTE_RICH|wxTE_READONLY|wxTE_MULTILINE);
    
    staticBoxSizer11162->Add(m_textCtrlWizEmailClients, 1, wxEXPAND, WXC_FROM_DIP(5));
    
    m_panelNotification = new wxPanel(m_treebookJob, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_treebookJob, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_treebookJob->AddPage(m_panelNotification, _("Email Notification"), false, wxNOT_FOUND);
    
    wxBoxSizer* boxSizerNotification = new wxBoxSizer(wxVERTICAL);
    m_panelNotification->SetSizer(boxSizerNotification);
    
    m_panel1420 = new wxPanel(m_panelNotification, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelNotification, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    boxSizerNotification->Add(m_panel1420, 0, wxALL, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer1422 = new wxBoxSizer(wxVERTICAL);
    m_panel1420->SetSizer(boxSizer1422);
    
    m_staticTextNotification = new wxStaticText(m_panel1420, wxID_ANY, _("New Task  - Notification"), wxDefaultPosition, wxDLG_UNIT(m_panel1420, wxSize(-1,-1)), 0);
    
    boxSizer1422->Add(m_staticTextNotification, 0, wxALL, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizer12783 = new wxStaticBoxSizer( new wxStaticBox(m_panel1420, wxID_ANY, _("Email Notification")), wxVERTICAL);
    
    boxSizer1422->Add(staticBoxSizer12783, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_checkEmailWanted = new wxCheckBox(m_panel1420, wxID_ANY, _("Send e-mail notification"), wxDefaultPosition, wxDLG_UNIT(m_panel1420, wxSize(-1,-1)), 0);
    m_checkEmailWanted->SetValue(false);
    m_checkEmailWanted->SetFocus();
    
    staticBoxSizer12783->Add(m_checkEmailWanted, 0, wxALL, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer13235 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer13235->SetFlexibleDirection( wxBOTH );
    flexGridSizer13235->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer13235->AddGrowableCol(1);
    
    boxSizer1422->Add(flexGridSizer13235, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticTextNotificationSmtpServer = new wxStaticText(m_panel1420, wxID_ANY, _("SMTP Server:"), wxDefaultPosition, wxDLG_UNIT(m_panel1420, wxSize(-1,-1)), wxALIGN_RIGHT);
    m_staticTextNotificationSmtpServer->SetToolTip(_("SMTP server to use for sending the report"));
    
    flexGridSizer13235->Add(m_staticTextNotificationSmtpServer, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer1286107 = new wxBoxSizer(wxHORIZONTAL);
    
    flexGridSizer13235->Add(boxSizer1286107, 1, wxALL|wxEXPAND|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_textCtrlNotificationServer = new wxTextCtrl(m_panel1420, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panel1420, wxSize(-1,-1)), 0);
    m_textCtrlNotificationServer->SetToolTip(_("Name of the SMTP server to use for sending the report"));
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlNotificationServer->SetHint(wxT(""));
    #endif
    
    boxSizer1286107->Add(m_textCtrlNotificationServer, 1, wxALL, WXC_FROM_DIP(5));
    
    m_buttonNotificationAdvanced = new wxButton(m_panel1420, wxID_ANY, _("Advanced"), wxDefaultPosition, wxDLG_UNIT(m_panel1420, wxSize(-1,-1)), wxBU_EXACTFIT);
    m_buttonNotificationAdvanced->SetToolTip(_("Setup advnced SMTP options"));
    m_buttonNotificationAdvanced->Enable(false);
    
    boxSizer1286107->Add(m_buttonNotificationAdvanced, 0, wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_staticTextNotificationFrom = new wxStaticText(m_panel1420, wxID_ANY, _("From:"), wxDefaultPosition, wxDLG_UNIT(m_panel1420, wxSize(-1,-1)), 0);
    
    flexGridSizer13235->Add(m_staticTextNotificationFrom, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer128621411 = new wxBoxSizer(wxHORIZONTAL);
    
    flexGridSizer13235->Add(boxSizer128621411, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_textCtrlNotificationFrom = new wxTextCtrl(m_panel1420, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panel1420, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlNotificationFrom->SetHint(wxT(""));
    #endif
    
    boxSizer128621411->Add(m_textCtrlNotificationFrom, 1, wxLEFT|wxTOP|wxBOTTOM, WXC_FROM_DIP(5));
    
    m_staticTextNotificationTo = new wxStaticText(m_panel1420, wxID_ANY, _("To:"), wxDefaultPosition, wxDLG_UNIT(m_panel1420, wxSize(-1,-1)), 0);
    m_staticTextNotificationTo->SetToolTip(_("Addresee for the notification email"));
    
    flexGridSizer13235->Add(m_staticTextNotificationTo, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer1286251714 = new wxBoxSizer(wxHORIZONTAL);
    
    flexGridSizer13235->Add(boxSizer1286251714, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_textCtrlNotificationTo = new wxTextCtrl(m_panel1420, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panel1420, wxSize(-1,-1)), 0);
    m_textCtrlNotificationTo->SetToolTip(_("Addresee for the notification email"));
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlNotificationTo->SetHint(wxT(""));
    #endif
    
    boxSizer1286251714->Add(m_textCtrlNotificationTo, 1, wxLEFT|wxTOP|wxBOTTOM, WXC_FROM_DIP(5));
    
    m_staticTextNotificationSubject = new wxStaticText(m_panel1420, wxID_ANY, _("Subject:"), wxDefaultPosition, wxDLG_UNIT(m_panel1420, wxSize(-1,-1)), 0);
    m_staticTextNotificationSubject->SetToolTip(_("Subject line for the notification email"));
    
    flexGridSizer13235->Add(m_staticTextNotificationSubject, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer1286272017 = new wxBoxSizer(wxHORIZONTAL);
    
    flexGridSizer13235->Add(boxSizer1286272017, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_textCtrlNotificationSubject = new wxTextCtrl(m_panel1420, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panel1420, wxSize(-1,-1)), 0);
    m_textCtrlNotificationSubject->SetToolTip(_("Subject line for the notification email.\nOK to use the macros {version} & {machine}"));
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlNotificationSubject->SetHint(wxT(""));
    #endif
    
    boxSizer1286272017->Add(m_textCtrlNotificationSubject, 1, wxLEFT|wxTOP|wxBOTTOM, WXC_FROM_DIP(5));
    
    m_staticText136219 = new wxStaticText(m_panel1420, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panel1420, wxSize(-1,-1)), 0);
    
    flexGridSizer13235->Add(m_staticText136219, 0, wxALL, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer1313253020 = new wxBoxSizer(wxHORIZONTAL);
    
    flexGridSizer13235->Add(boxSizer1313253020, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    
    m_checkBoxNotifyOnError = new wxCheckBox(m_panel1420, wxID_ANY, _("Only on errors"), wxDefaultPosition, wxDLG_UNIT(m_panel1420, wxSize(-1,-1)), 0);
    m_checkBoxNotifyOnError->SetValue(false);
    m_checkBoxNotifyOnError->SetToolTip(_("Send notification only if an error occurs."));
    
    boxSizer1313253020->Add(m_checkBoxNotifyOnError, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_checkBoxAddLogFile = new wxCheckBox(m_panel1420, wxID_ANY, _("Attach Log"), wxDefaultPosition, wxDLG_UNIT(m_panel1420, wxSize(-1,-1)), 0);
    m_checkBoxAddLogFile->SetValue(false);
    m_checkBoxAddLogFile->SetToolTip(_("Attach the log file to the notificatiion message."));
    m_checkBoxAddLogFile->Enable(false);
    
    boxSizer1313253020->Add(m_checkBoxAddLogFile, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_buttonNotificationSendTest = new wxButton(m_panel1420, wxID_ANY, _("Send a test message"), wxDefaultPosition, wxDLG_UNIT(m_panel1420, wxSize(-1,-1)), 0);
    m_buttonNotificationSendTest->SetToolTip(_("Send a notification test message"));
    
    boxSizer1313253020->Add(m_buttonNotificationSendTest, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_panelWhenDone = new wxPanel(m_treebookJob, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_treebookJob, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_treebookJob->AddPage(m_panelWhenDone, _("When Done"), false, wxNOT_FOUND);
    
    wxBoxSizer* boxSizerWhenDone = new wxBoxSizer(wxVERTICAL);
    m_panelWhenDone->SetSizer(boxSizerWhenDone);
    
    m_panel1428 = new wxPanel(m_panelWhenDone, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelWhenDone, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    boxSizerWhenDone->Add(m_panel1428, 0, wxALL, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer1430 = new wxBoxSizer(wxVERTICAL);
    m_panel1428->SetSizer(boxSizer1430);
    
    m_staticTextWhenDone = new wxStaticText(m_panel1428, wxID_ANY, _("New Task  - When Done"), wxDefaultPosition, wxDLG_UNIT(m_panel1428, wxSize(-1,-1)), 0);
    
    boxSizer1430->Add(m_staticTextWhenDone, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizer111624 = new wxStaticBoxSizer( new wxStaticBox(m_panel1428, wxID_ANY, _("When job is finished:")), wxVERTICAL);
    
    boxSizer1430->Add(staticBoxSizer111624, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_checkBoxRunVerify = new wxCheckBox(m_panel1428, wxID_ANY, _("Verify job"), wxDefaultPosition, wxDLG_UNIT(m_panel1428, wxSize(-1,-1)), 0);
    m_checkBoxRunVerify->SetValue(true);
    m_checkBoxRunVerify->SetFocus();
    
    staticBoxSizer111624->Add(m_checkBoxRunVerify, 0, wxALL, WXC_FROM_DIP(5));
    
    m_stdBtnSizer914107 = new wxStdDialogButtonSizer();
    
    boxSizerJobDlg->Add(m_stdBtnSizer914107, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    
    m_buttonJobOK = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer914107->AddButton(m_buttonJobOK);
    
    m_buttonJobCancel = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer914107->AddButton(m_buttonJobCancel);
    m_stdBtnSizer914107->Realize();
    
    m_treebookJob->ExpandNode( 0, true );
    m_treebookJob->ExpandNode( 1, true );
    m_treebookJob->ExpandNode( 2, true );
    m_treebookJob->ExpandNode( 3, true );
    m_treebookJob->ExpandNode( 4, true );
    m_treebookJob->ExpandNode( 5, true );
    m_treebookJob->ExpandNode( 6, true );
    m_treebookJob->ExpandNode( 7, true );
    
    SetName(wxT("wxBupJobDataDlgBase"));
    SetSize(-1,-1);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
    // Connect events
    m_treebookJob->Connect(wxEVT_COMMAND_TREEBOOK_PAGE_CHANGED, wxTreebookEventHandler(wxBupJobDataDlgBase::OnTreebookJobPageChanged), NULL, this);
    m_radioBoxBackupType->Connect(wxEVT_COMMAND_RADIOBOX_SELECTED, wxCommandEventHandler(wxBupJobDataDlgBase::OnBackupTypeClicked), NULL, this);
    m_dirPickerDestinationDir->Connect(wxEVT_COMMAND_DIRPICKER_CHANGED, wxFileDirPickerEventHandler(wxBupJobDataDlgBase::OnWizDestnDirChanged), NULL, this);
    m_dirPickerDestinationDir->Connect(wxEVT_MOUSE_CAPTURE_LOST, wxMouseCaptureLostEventHandler(wxBupJobDataDlgBase::OnWizDestnDirMouseCapLost), NULL, this);
    m_radioBoxDestnMedia->Connect(wxEVT_COMMAND_RADIOBOX_SELECTED, wxCommandEventHandler(wxBupJobDataDlgBase::OnDestnDriveIdChanged), NULL, this);
    m_listBoxSource->Connect(wxEVT_COMMAND_LISTBOX_SELECTED, wxCommandEventHandler(wxBupJobDataDlgBase::OnSourceListSelect), NULL, this);
    m_buttonSrcDel->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(wxBupJobDataDlgBase::OnUpdateUIButtonSrcDel), NULL, this);
    m_buttonSrcDel->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(wxBupJobDataDlgBase::OnWizSrcDel), NULL, this);
    m_genericDirCtrlSrcPicker->Connect(wxEVT_COMMAND_TREE_BEGIN_DRAG, wxTreeEventHandler(wxBupJobDataDlgBase::OnBeginDrag), NULL, this);
    m_genericDirCtrlSrcPicker->Connect(wxEVT_COMMAND_TREE_KEY_DOWN, wxTreeEventHandler(wxBupJobDataDlgBase::OnSourceTreeKeyDown), NULL, this);
    m_checkEmailWanted->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(wxBupJobDataDlgBase::OnJobOptionEmailWanted), NULL, this);
    m_buttonNotificationSendTest->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(wxBupJobDataDlgBase::OnNotificationSendTestMessage), NULL, this);
    
}

wxBupJobDataDlgBase::~wxBupJobDataDlgBase()
{
    m_treebookJob->Disconnect(wxEVT_COMMAND_TREEBOOK_PAGE_CHANGED, wxTreebookEventHandler(wxBupJobDataDlgBase::OnTreebookJobPageChanged), NULL, this);
    m_radioBoxBackupType->Disconnect(wxEVT_COMMAND_RADIOBOX_SELECTED, wxCommandEventHandler(wxBupJobDataDlgBase::OnBackupTypeClicked), NULL, this);
    m_dirPickerDestinationDir->Disconnect(wxEVT_COMMAND_DIRPICKER_CHANGED, wxFileDirPickerEventHandler(wxBupJobDataDlgBase::OnWizDestnDirChanged), NULL, this);
    m_dirPickerDestinationDir->Disconnect(wxEVT_MOUSE_CAPTURE_LOST, wxMouseCaptureLostEventHandler(wxBupJobDataDlgBase::OnWizDestnDirMouseCapLost), NULL, this);
    m_radioBoxDestnMedia->Disconnect(wxEVT_COMMAND_RADIOBOX_SELECTED, wxCommandEventHandler(wxBupJobDataDlgBase::OnDestnDriveIdChanged), NULL, this);
    m_listBoxSource->Disconnect(wxEVT_COMMAND_LISTBOX_SELECTED, wxCommandEventHandler(wxBupJobDataDlgBase::OnSourceListSelect), NULL, this);
    m_buttonSrcDel->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(wxBupJobDataDlgBase::OnUpdateUIButtonSrcDel), NULL, this);
    m_buttonSrcDel->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(wxBupJobDataDlgBase::OnWizSrcDel), NULL, this);
    m_genericDirCtrlSrcPicker->Disconnect(wxEVT_COMMAND_TREE_BEGIN_DRAG, wxTreeEventHandler(wxBupJobDataDlgBase::OnBeginDrag), NULL, this);
    m_genericDirCtrlSrcPicker->Disconnect(wxEVT_COMMAND_TREE_KEY_DOWN, wxTreeEventHandler(wxBupJobDataDlgBase::OnSourceTreeKeyDown), NULL, this);
    m_checkEmailWanted->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(wxBupJobDataDlgBase::OnJobOptionEmailWanted), NULL, this);
    m_buttonNotificationSendTest->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(wxBupJobDataDlgBase::OnNotificationSendTestMessage), NULL, this);
    
}

MyOverWriteDlgBase::MyOverWriteDlgBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCE65CInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* boxSizer1082 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer1082);
    
    m_panel1088 = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    boxSizer1082->Add(m_panel1088, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer1090 = new wxBoxSizer(wxVERTICAL);
    m_panel1088->SetSizer(boxSizer1090);
    
    m_staticTextWarnDestDir = new wxStaticText(m_panel1088, wxID_ANY, _("Destination directory %s exists!"), wxDefaultPosition, wxDLG_UNIT(m_panel1088, wxSize(-1,-1)), 0);
    
    boxSizer1090->Add(m_staticTextWarnDestDir, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticTextDestDeleteWarning = new wxStaticText(m_panel1088, wxID_ANY, _("It will be necessary to delete all of its contents!"), wxDefaultPosition, wxDLG_UNIT(m_panel1088, wxSize(-1,-1)), 0);
    
    boxSizer1090->Add(m_staticTextDestDeleteWarning, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    
    m_staticText1096 = new wxStaticText(m_panel1088, wxID_ANY, _("Continue?"), wxDefaultPosition, wxDLG_UNIT(m_panel1088, wxSize(-1,-1)), 0);
    
    boxSizer1090->Add(m_staticText1096, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    
    m_stdBtnSizer1104 = new wxStdDialogButtonSizer();
    
    boxSizer1090->Add(m_stdBtnSizer1104, 0, wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    
    m_buttonDelWarningOK = new wxButton(m_panel1088, wxID_OK, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panel1088, wxSize(-1, -1)), 0);
    m_buttonDelWarningOK->SetToolTip(_("Continue and save the job data"));
    m_buttonDelWarningOK->SetToolTip(_("Continue and save the job data"));
    m_stdBtnSizer1104->AddButton(m_buttonDelWarningOK);
    
    m_buttonDelWarningCancel = new wxButton(m_panel1088, wxID_CANCEL, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panel1088, wxSize(-1, -1)), 0);
    m_buttonDelWarningCancel->SetToolTip(_("Continue without saving the job data"));
    m_buttonDelWarningCancel->SetDefault();
    m_buttonDelWarningCancel->SetToolTip(_("Continue without saving the job data"));
    m_stdBtnSizer1104->AddButton(m_buttonDelWarningCancel);
    m_stdBtnSizer1104->Realize();
    
    m_checkBoxShowWarning = new wxCheckBox(m_panel1088, wxID_STOP_DEL_WARN, _("Do not show warning again"), wxDefaultPosition, wxDLG_UNIT(m_panel1088, wxSize(-1,-1)), 0);
    m_checkBoxShowWarning->SetValue(false);
    
    boxSizer1090->Add(m_checkBoxShowWarning, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticTextReinstate = new wxStaticText(m_panel1088, wxID_ANY, _("You can re-enable the warning on the 'General'\npage of the Options dialog"), wxDefaultPosition, wxDLG_UNIT(m_panel1088, wxSize(-1,-1)), 0);
    
    boxSizer1090->Add(m_staticTextReinstate, 0, wxALL, WXC_FROM_DIP(5));
    
    SetName(wxT("MyOverWriteDlgBase"));
    SetSize(500,300);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
    // Connect events
    this->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyOverWriteDlgBase::OnUpdateUiWarnCheckBox), NULL, this);
    m_checkBoxShowWarning->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(MyOverWriteDlgBase::OnStopDestDeleteWarning), NULL, this);
    
}

MyOverWriteDlgBase::~MyOverWriteDlgBase()
{
    this->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyOverWriteDlgBase::OnUpdateUiWarnCheckBox), NULL, this);
    m_checkBoxShowWarning->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(MyOverWriteDlgBase::OnStopDestDeleteWarning), NULL, this);
    
}

MyBupUpdateDlgBase::MyBupUpdateDlgBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCE65CInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* boxSizer1146 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer1146);
    
    m_panel1168 = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    boxSizer1146->Add(m_panel1168, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer1170 = new wxBoxSizer(wxVERTICAL);
    m_panel1168->SetSizer(boxSizer1170);
    
    m_staticTextVersion = new wxStaticText(m_panel1168, wxID_ANY, _("Version %d.%d.%d is available for download!"), wxDefaultPosition, wxDLG_UNIT(m_panel1168, wxSize(-1,-1)), 0);
    
    boxSizer1170->Add(m_staticTextVersion, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer1150 = new wxBoxSizer(wxHORIZONTAL);
    
    boxSizer1170->Add(boxSizer1150, 0, wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    
    m_staticText1152 = new wxStaticText(m_panel1168, wxID_ANY, _("Visit the"), wxDefaultPosition, wxDLG_UNIT(m_panel1168, wxSize(-1,-1)), 0);
    
    boxSizer1150->Add(m_staticText1152, 0, 0, WXC_FROM_DIP(5));
    
    m_hyperLinkBupUpdatePage = new wxHyperlinkCtrl(m_panel1168, wxID_ANY, _("wxBUP"), wxT("http://columbinehoney.net/index.php/software/wxwidgets/wxbup"), wxDefaultPosition, wxDLG_UNIT(m_panel1168, wxSize(-1,-1)), wxHL_DEFAULT_STYLE);
    m_hyperLinkBupUpdatePage->SetNormalColour(wxColour(wxT("#0000FF")));
    m_hyperLinkBupUpdatePage->SetHoverColour(wxColour(wxT("#0000FF")));
    m_hyperLinkBupUpdatePage->SetVisitedColour(wxColour(wxT("#FF0000")));
    
    boxSizer1150->Add(m_hyperLinkBupUpdatePage, 0, wxLEFT, WXC_FROM_DIP(5));
    
    m_staticText1156 = new wxStaticText(m_panel1168, wxID_ANY, _("web site"), wxDefaultPosition, wxDLG_UNIT(m_panel1168, wxSize(-1,-1)), 0);
    
    boxSizer1150->Add(m_staticText1156, 0, wxLEFT, WXC_FROM_DIP(5));
    
    m_staticText1158 = new wxStaticText(m_panel1168, wxID_ANY, _("for the latest version"), wxDefaultPosition, wxDLG_UNIT(m_panel1168, wxSize(-1,-1)), 0);
    
    boxSizer1170->Add(m_staticText1158, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    
    m_staticLine1160 = new wxStaticLine(m_panel1168, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panel1168, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    boxSizer1170->Add(m_staticLine1160, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText1162 = new wxStaticText(m_panel1168, wxID_ANY, _("Please note:"), wxDefaultPosition, wxDLG_UNIT(m_panel1168, wxSize(-1,-1)), 0);
    
    boxSizer1170->Add(m_staticText1162, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    
    m_staticText1164 = new wxStaticText(m_panel1168, wxID_ANY, _("Automatic checking for updates at startup can \n be enabled or disabled in the 'Options' dialog\n"), wxDefaultPosition, wxDLG_UNIT(m_panel1168, wxSize(-1,-1)), 0);
    
    boxSizer1170->Add(m_staticText1164, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    
    m_button1166 = new wxButton(this, wxID_OK, _("OK"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer1146->Add(m_button1166, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    
    SetName(wxT("MyBupUpdateDlgBase"));
    SetSize(400,250);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
}

MyBupUpdateDlgBase::~MyBupUpdateDlgBase()
{
}
